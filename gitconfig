[include]
	path = .gitconfig.local
[ghq]
	root = ~/git
[github]
	user = ywatase
[user]
	name = Yusuke Watase
	email = ywatase@gmail.com
[core]
	excludesfile = ~/.gitignore
	autocrlf = input                 # CRLFを自動変換
	editor = vim
	quotepath = false                # 日本語をエスケープせずに表示
	precomposeunicode = true
[color]
	# colorの設定(以下のコマンドは自動で色つける)
	status = auto
	diff = auto
	branch = auto
	interactive = auto
	grep = auto
[alias]
	st = status
	sh = show
	so = remote show origin
	ft = fetch
	up = pull --rebase       # pull rebase
	rbm = rebase master      # masterへのrebaseはよく使うのでalias
	ad = add
	ci = commit -a           # modifiedなファイルを全てstageへ
	cam = commit -a --amend  # 直前のcommitを修正
	co = checkout
  # branch関連
	br = branch
	ba = branch -a           # originも含めた全てのbranchを表示
	bm = branch --merged     # merge済みのbranchを表示
	bn = branch --no-merged  # mergeしてないbranchを表示
  # log関連
	wc = whatchanged         # logに変更されたファイルも一緒に出す
	ls = log --stat          # logに変更されたファイルも一緒に出す
	lp = log -p              # diffも一緒に出す
	la = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
	lr = log origin          # originのlog
	oneline = log --pretty=oneline
	ranking = shortlog -s -n --no-merges
  # logをtree表示
	log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
	log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  # diff関連
	dm = diff master           # masterとのdiff
	dw = diff --color-words    # 単語単位でいろつけてdiff
	dc = diff --cached         # addされているものとのdiff
	ds = diff --staged         # 同上(1.6.1移行)
	d1 = diff HEAD~            # HEADから1つ前とdiff
	d2 = diff HEAD~~           # HEADから2つ前とdiff
	d3 = diff HEAD~~~          # HEADから3つ前とdiff
	d4 = diff HEAD~~~~         # HEADから4つ前とdiff
	d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
	d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
  # mergeの際にconflictが起きたファイルを編集
	edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # mergeの際にconflictが起きたファイルをadd
	add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  # grep関連
	gr = grep
	gn = grep -n
  # stash
	stsh    = stash --keep-index          # stash only unstaged changes to tracked files
	staash  = stash --include-untracked   # stash untracked and tracked files
	staaash = stash --all                 # stash ignored, untracked, and tracked files

	n  = now --all --stat
	r1 = reset HEAD~1
	r2 = reset HEAD~2

[commit]
	template = ~/.gitmessage

[tig]
	vertical-split = no
[tig "bind"]
	generic = g move-first-line
	generic = G move-last-line
	generic = <Ctrl-F> move-page-down
	generic = <Ctrl-B> move-page-up
	main    = R !git rebase -i %(commit)
	diff    = R !git rebase -i %(commit)
	status  = V !vim -c :Gdiff '%(file)'
	# ` で commit ID をクリップボードにコピー(Mac用)
	generic = ` @bash -c "echo -n '%(commit)' | pbcopy"
	# ` でファイルパスをクリップボードにコピー (Mac用)
	stage   = ` @bash -c "echo -n '%(file)' | pbcopy"
	status  = ` @bash -c "echo -n '%(file)' | pbcopy"
	tree    = ` @bash -c "echo -n '%(file)' | pbcopy"
	blob    = ` @bash -c "echo -n '%(file)' | pbcopy"

#[merge]
#	ff = false

[merge.tool "vimdiff"]
[push]
	default = simple
[url "https://"]
	insteadOf = git://
[init]
	templatedir = ~/.git-templates/git-secrets
	defaultBranch = main
[secrets]
	providers = git secrets --aws-provider
	patterns = (A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}
	patterns = (\"|')?(AWS|aws|Aws)?_?(SECRET|secret|Secret)?_?(ACCESS|access|Access)?_?(KEY|key|Key)(\"|')?\\s*(:|=>|=)\\s*(\"|')?[A-Za-z0-9/\\+=]{40}(\"|')?
	patterns = (\"|')?(AWS|aws|Aws)?_?(ACCOUNT|account|Account)_?(ID|id|Id)?(\"|')?\\s*(:|=>|=)\\s*(\"|')?[0-9]{4}\\-?[0-9]{4}\\-?[0-9]{4}(\"|')?
	allowed = AKIAIOSFODNN7EXAMPLE
	allowed = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
