#!/usr/bin/env python

from __future__ import print_function
import ConfigParser
import os
import sys

# Track all ENV variables that we may set so we know what to unset later"
# Key is environment variable name, value is ini setting from mackerel config
mackerel_dict = {
    'MACKEREL_APIKEY': 'mackerel_apikey',
}


def get_option(config, section, option):
    """Return value of ini option in section; empty string if not found"""
    try:
        return config.get(section, option)
    except ConfigParser.NoOptionError:
        return ''


def show_env(config):
    """Print Mackerel-related environment vars, and which profile(s) they match"""
    print()
    print('Current Mackerel Environment Variables:')
    print()
    for env_setting, ini_opt in mackerel_dict.items():
        ini_value = os.environ.get(env_setting)
        if ini_value is None:
            print(env_setting, "not set")
        else:
            match_sections = []
            for section in config.sections():
                if get_option(config, section, ini_opt) == ini_value:
                    match_sections.append(section.replace('profile ', ''))
            if len(match_sections):
                print(env_setting, "matches", match_sections)


def unset_values():
    """return string representation of command to unset environment vars"""
    return "unset {0}; ".format(' '.join(mackerel_dict.keys()))


def exit_out(message, error=False):
    out = sys.stderr if error else sys.stdout
    print(message, file=out)
    exit(1 if error else 0)


profile = ''
config_files = []

if len(sys.argv) > 1:
    if sys.argv[1] == '--unset':
        exit_out(unset_values())
    else:
        profile = sys.argv[1]

if os.environ.get('MACKEREL_CONFIG_FILE'):
    config_files.append(os.path.expanduser(os.environ.get('MACKEREL_CONFIG_FILE')))
else:
    config_files.append(os.path.expanduser('~/.mackerel/config'))

config_files.append(os.path.expanduser('~/.mackerel/credentials'))

if not config_files:
    exit_out("Error: no valid Mackerel config file(s) found", True)

config = ConfigParser.ConfigParser()
config.read(config_files)

if not profile:
    show_env(config)
    exit(0)

settings = {}
if config.has_section('profile ' + profile) or config.has_section(profile):
    for env_setting, ini_opt in mackerel_dict.items():
        if profile != 'default':
            # Profiles in ~/.mackerel/config begin with "profile ", except default
            if config.has_section('profile ' + profile):
                value = get_option(config, 'profile ' + profile, ini_opt)
                if value:
                    settings[env_setting] = value
        if config.has_section(profile):
            value = get_option(config, profile, ini_opt)
            if value:
                settings[env_setting] = value
            settings['MACKEREL_PROFILE'] = profile

else:
    exit_out("Error: profile {0} not found.".format(profile), True)

print(unset_values())
if settings:
    output = 'export '
    output += ' '.join("{0}={1}".format(k, v) for (k, v) in settings.items())
    print(output)
