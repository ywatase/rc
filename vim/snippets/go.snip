snippet hs
abbr http.ListenAndServe
      port := flag.Int("port", 4978, "listen port")
      address := flag.String("address", "localhost", "listen address")
      flag.Parse()
      // compl: hhf
      http.HandleFunc("/", viewHandler)
      http.ListenAndServe(fmt.Sprintf("%s:%d", *address, *port), nil)

  // compl: hff
snippet hff
abbr http.HandlerFunc
  // the path will be :  /xxxx/:user/:book/
  func ${1:handler}(w http.ResponseWriter, r *http.Request, pam map[string]string) {
    //r.FormValue to access the url query parameters
    fmt.Fprint(w, "fileds=" + r.FormValue("fields") + "\n")

    //r.URL.Query().Get() only get the 1st item of the query param
    fmt.Fprint(w, "fields=" + r.URL.Query().Get("fields") + "\n")

    //r.URL.Query()[] get array of all values of the query param
    paramarray := r.URL.Query()["fields"]

    for _, value := range paramarray {
        fmt.Fprint(w, "fields="+value + "\n")
    }

    fmt.Fprint(w, pam["user"])
    fmt.Fprint(w, pam["book"])

    // set or add headers
    w.Header().Set("aa", "abcd")
    w.Header().Add("bb", "cdef")

    // use fmt.Fprint to write response body
    fmt.Fprintf(w, "hello world")

    // redirect
    http.Redirect(w, r, "http://www.google.com/", 307)
    return nil
  }


snippet cgi
abbr cgi.Serve
  cgi.Serve(http.HandlerFunc("/", apiHander))
