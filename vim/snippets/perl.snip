# #!/usr/bin/perl
snippet #!
	#!/usr/bin/env perl
	
# Function
snippet sub
	sub ${1:function_name} {
		${2:#body ...}
	}
# Conditional
snippet if
	if (${1}) {
		${2:# body...}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2:# body...}
	}
	else {
		${3:# else...}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2:# body...}
	}
	elsif (${3}) {
		${4:# elsif...}
	}
	else {
		${5:# else...}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};${3}
# Unless conditional
snippet unless
	unless (${1}) {
		${2:# body...}
	}
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};${3}
# Try/Except
snippet eval
	eval {
		${1:# do something risky...}
	};
	if ($@) {
		${2:# handle failure...}
	}
# While Loop
snippet wh
	while (${1}) {
		${2:# body...}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
# For Loop
snippet for
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:# body...}
	}
# Foreach Loop
snippet fore
	foreach my $${1:x} (@${2:array}) {
		${3:# body...}
	}
# Foreach Loop One-line
snippet xfore
	${1:expression} foreach @${2:array};${3}
# Package
snippet cl
alias   new
options head
	package ${1:ClassName};
	
	use parent qw(${2:ParentClass});
	
	sub new {
		my $this = shift;
		my $class = ref($this) || $this; ## no critic
        my %args = ref $_[0] ? %{$_[0]} : @_;
		return bless \%args, $class;
	}
    ${3}
	
	1;
snippet accessor
options head
	sub ${1:subname} {
	    $_[0]->{_$1} = $_[1] if $_[1];
	    return $_[0]->{_$1}
	}
# Read File
snippet slurp
	my $${1:var};
	{ local $/ = undef; local *FILE; open FILE, '<', "${2:file}"; $$1 = <FILE>; close FILE }${3}

snippet slurpf
	use File::Slurp qw/slurp/;
	my @lines = slurp(${1:filename});
	foreach my $line (@lines){
		${2:#body...}
	}

snippet open
	open my $fh, '<', ${1:filename} or die  "Can't open file: $1";
	while (my $line = <$fh>){
		chomp $line;
		${2:#body...}
	}
	close $fh or die "Can't close file: $1";

snippet open2
	use IPC::Open2;
	my ($rdr, $wtr);
	my @cmd = (qw(${1:command}));
	my $pid = open2($rdr, $wtr, @cmd);
	close $wtr;
	while (my $line = <$rdr>){
		chomp $line;
		${2:#body...}
	}
	waitpid($pid, 0);
	close $rdr;

snippet open3
	use IPC::Open3;
	my ($wtr, $rdr);
	my @cmd = (qw(${1:command}));
	my $pid = open3($wtr, $rdr, 0, @cmd);
	close $wtr;
	while (my $line = <$rdr>){
		chomp $line;
		${2:#body...}
	}
	waitpid($pid, 0);
	close $rdr;

snippet querylog
    require DBIx::QueryLog; my $guard = DBIx::QueryLog->guard();
snippet dump 
	use Data::Dumper; warn Dumper ${1:$var};
snippet reply
	use Carp::Reply; Carp::Reply::repl();
snippet say 
	print ${1:$var}, "\n";
	${2}
snippet self 
	my ($self${1:, $var}) = @_;
	${2}
snippet data 
	my $data = do { 
		local $/; 
		<DATA> 
	};
	${1}
snippet argf 
	while (<>) {
		chomp;
		${1}
	}
	${2}
snippet isa 
	if (blessed ${1:$var} and ${2:$var}->isa('${3:Class}')) {
		${4}
	}
	${5}
snippet readcsv 
	use IO::File;
	use Text::CSV_XS;
 
	my $fh = IO::File->new('${1:filename}') or die 'cannot open file.';
	my $csv = Text::CSV_XS->new({ sep_char => "\t", binary => 1 });
	until ($fh->eof) {
		my $cols = $csv->getline($fh);
		unless ($cols) {
			warn $csv->error_diag;
			next;
		}
		my (${2}) = @$cols;
	}
	$fh->close;
	${3}
 
#class-C3
snippet next 
	$self->next::method(@_);
	${1}
snippet maybe 
	$self->maybe::next::method(@_);
	${1}
 
#Catalyst
snippet debug 
	$c->log->debug('${1:[ debug ]}: '. ${2:$var});
	${3}
snippet warn 
	$c->log->warn('${1:[ warn ]}: '. ${2:$var});
	${3}
snippet dumper 
	use Data::Dumper; $c->log->debug('${1:[ dumper ]}: '. Dumper ${2:$var});
	${3}
snippet model 
	$c->model('${1:model}')
	${2}
snippet view 
	$c->view('${1:view}')
	${2}
snippet template 
	$c->view('View::TT')->template('${1:name}');
	${2}
snippet config 
	$c->config->{${1:name}}
	${2}
snippet controller 
	sub ${1:func} : ${2:Attribute} {
		my ($self, $c) = @_;
		${3}
	}
	${4}
snippet begin 
	sub begin : Private {
		my ($self, $c) = @_;
		${1}
		1;
	}
	${2}
snippet auto 
	sub auto : Private {
		my ($self, $c) = @_;
		${1}
		1;
	}
	${2}
snippet detach 
	$c->detach('${1:name}');
	${2}
snippet forward 
	$c->forward('${1:name}');
	${2}
snippet stash 
	$c->stash->{${1:var}}${2}
snippet flash 
	$c->flash->{${1:var}}${2}
snippet session 
	$c->session->{${1:var}}${2}
snippet sstash 
	$c->stash->{${1:var}} = ${2};
	${3}
snippet sflash 
	$c->flash->{${1:var}} = ${2};
	${3}
snippet ssession 
	$c->session->{${1:var}} = ${2};
	${3}
snippet rs 
	$c->model('DBIC::${1:Source}')
	${2}
snippet redirect 
	$c->response->redirect($c->uri_for('${1:uri}'));
	${2}
snippet param 
	$c->request->param('${1:param}')
	${2}
# Getopt::Long
snippet GetoptLong
    use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat bundling auto_version auto_help);
    use Pod::Usage;
# File::Spec->catfile
snippet File::Spec
    use File::Spec;
    use File::Basename;
    use lib File::Spec->catfile(dirname(__FILE__), qw(${1:.. lib}));
snippet catfile
    File::Spec->catfile(dirname(__FILE__), qw(${1:.. lib}));
# Moose & Mouse
snippet hasMoose
	has '${1}' => (is => 'rw', isa => '${2}', lazy_build => 1);
	sub _build_$1 {
	    my ($self) = @_;
	    return;
	}
snippet immutable
	__PACKAGE__->meta->make_immutable();
# Moo
snippet Moo
    use Moo;
    use MooX::Types::MooseLike::Base qw(:all);
    ${1}
snippet has
	has '${1}' => (is => 'lazy', isa => ${2});
	sub _build_$1 {
	    my ($self) = @_;
	    return;
	}

snippet benchmark
	use Benchmark qw/timethese cmpthese/;
	my $count = ${1}
	# bench
	my $result = timethese($count, {
	    ${2:name}  => sub {
	        ${3}
	    },
	});
	cmpthese($result);
snippet benchmark2
	use strict;
	use Time::HiRes;

	my $start_time = currentTime ();
	
	&main();
	
	my $end_time = currentTime ();
	my $computation_time = $end_time - $start_time;
	print STDERR $computation_time;
	
	sub currentTime {
	  return Time::HiRes::time;
	}
	
	sub main {
		${1}
	}
snippet processAllFilesInDirectoryRecursively
	use File::Find;                   # File::Find - Traverse a directory tree
	my  @directory_list   = ( ${1} );  # directory_list used by File::Find::find()
	my  $files_processed  = 0;        # counts the files processed by process_file()
	
	#-----------------------------------------------------------------------
	# Process a single file in a directory
	#-----------------------------------------------------------------------
	sub process_file {
	  my  $filename      = $_;                # filename without directory
	  my  $filename_full = $File::Find::name; # filename with    directory
	  my  $directory     = $File::Find::dir;  # directory only
	
	  # print "$directory  :  $filename  :  $filename_full\n";
	
	  $files_processed++;
	
	  return ;
	} # ----------  end of subroutine process_file  ----------
	
	#-----------------------------------------------------------------------
	#  Process all files in a directory recursively
	#-----------------------------------------------------------------------
	find( \&process_file, @directory_list );
	print "\nfiles processed : $files_processed\n";
snippet SmallProfVariables
	# Devel::SmallProf : variables which can be used to affect what gets profiled.
	#
	use Devel::SmallProf;
	$DB::drop_zeros  = 0;            # Do not show lines which were never called: 1
	$DB::grep_format = 0;            # Output on a format similar to grep : 1
	$DB::profile     = 1;            # Turn off profiling for a time: 0
	%DB::packages    = ('main'=>1);  # Only profile code in a certain package.
snippet freeSoftwareComment
	#
	#==========================================================================
	#  This program is free software; you can redistribute it and/or modify 
	#  it under the terms of the GNU General Public License as published by 
	#  the Free Software Foundation; either version 2 of the License, or    
	#  (at your option) any later version.                                  
	#==========================================================================
	#
snippet podTemplateApplication
	
	=head1 NAME
	
	${1:application name} - ${2:One line description of application's purpose}
	
	=head1 VERSION
	
	The initial template usually just has:
	
	This documentation refers to ${1} version 0.0.1
	
	
	=head1 USAGE
	
	    # Brief working invocation example(s) here showing the most common usage(s)
	
	    # This section will be as far as many users ever read
	    # so make it as educational and exemplary as possible.
	
	
	=head1 REQUIRED ARGUMENTS
	
	A complete list of every argument that must appear on the command line.
	when the application  is invoked, explaining what each of them does, any
	restrictions on where each one may appear (i.e. flags that must appear
	before or after filenames), and how the various arguments and options
	may interact (e.g. mutual exclusions, required combinations, etc.)
	
	If all of the application's arguments are optional this section
	may be omitted entirely.
	
	
	=head1 OPTIONS
	
	A complete list of every available option with which the application
	can be invoked, explaining what each does, and listing any restrictions,
	or interactions.
	
	If the application has no options this section may be omitted entirely.
	
	
	=head1 DESCRIPTION
	
	A full description of the application and its features.
	May include numerous subsections (i.e. =head2, =head3, etc.)
	
	
	=head1 DIAGNOSTICS
	
	A list of every error and warning message that the application can generate
	(even the ones that will "never happen"), with a full explanation of each
	problem, one or more likely causes, and any suggested remedies. If the
	application generates exit status codes (e.g. under Unix) then list the exit
	status associated with each error.
	
	
	=head1 CONFIGURATION AND ENVIRONMENT
	
	A full explanation of any configuration system(s) used by the application,
	including the names and locations of any configuration files, and the
	meaning of any environment variables or properties that can be set. These
	descriptions must also include details of any configuration language used
	
	
	=head1 DEPENDENCIES
	
	A list of all the other modules that this module relies upon, including any
	restrictions on versions, and an indication whether these required modules are
	part of the standard Perl distribution, part of the module's distribution,
	or must be installed separately.
	
	
	=head1 INCOMPATIBILITIES
	
	A list of any modules that this module cannot be used in conjunction with.
	This may be due to name conflicts in the interface, or competition for
	system or program resources, or due to internal limitations of Perl
	(for example, many modules that use source code filters are mutually
	incompatible).
	
	
	=head1 BUGS AND LIMITATIONS
	
	A list of known problems with the module, together with some indication
	whether they are likely to be fixed in an upcoming release.
	
	Also a list of restrictions on the features the module does provide:
	data types that cannot be handled, performance issues and the circumstances
	in which they may arise, practical limitations on the size of data sets,
	special cases that are not (yet) handled, etc.
	
	The initial template usually just has:
	
	There are no known bugs in this module.
	Please report problems to <Maintainer name(s)>  (<contact address>)
	Patches are welcome.
	
	=head1 AUTHOR
	
	<Author name(s)>  (<contact address>)
	
	
	=head1 LICENCE AND COPYRIGHT
	
	Copyright (c) <year> <copyright holder> (<contact address>). All rights reserved.
	
	Followed by whatever licence you wish to release it under.
	For Perl code that is often just:
	
	This module is free software; you can redistribute it and/or
	modify it under the same terms as Perl itself. See perldoc perlartistic.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	
	=cut
	
snippet podTemplateModule
	
	=head1 NAME
	
	${1:Module::Name} - ${2:One line description of module's purpose}
	
	=head1 VERSION
	
	The initial template usually just has:
	
	This documentation refers to ${1} version 0.0.1
	
	
	=head1 SYNOPSIS
	
	    use ${1};
	    # Brief but working code example(s) here showing the most common usage(s)
	
	    # This section will be as far as many users bother reading
	    # so make it as educational and exemplary as possible.
	
	
	=head1 DESCRIPTION
	
	A full description of the module and its features.
	May include numerous subsections (i.e. =head2, =head3, etc.)
	
	
	=head1 SUBROUTINES/METHODS
	
	A separate section listing the public components of the module's interface.
	These normally consist of either subroutines that may be exported, or methods
	that may be called on objects belonging to the classes that the module provides.
	Name the section accordingly.
	
	In an object-oriented module, this section should begin with a sentence of the
	form "An object of this class represents...", to give the reader a high-level
	context to help them understand the methods that are subsequently described.
	
	
	=head1 DIAGNOSTICS
	
	A list of every error and warning message that the module can generate
	(even the ones that will "never happen"), with a full explanation of each
	problem, one or more likely causes, and any suggested remedies.
	
	
	=head1 CONFIGURATION AND ENVIRONMENT
	
	A full explanation of any configuration system(s) used by the module,
	including the names and locations of any configuration files, and the
	meaning of any environment variables or properties that can be set. These
	descriptions must also include details of any configuration language used.
	
	
	=head1 DEPENDENCIES
	
	A list of all the other modules that this module relies upon, including any
	restrictions on versions, and an indication whether these required modules are
	part of the standard Perl distribution, part of the module's distribution,
	or must be installed separately.
	
	
	=head1 INCOMPATIBILITIES
	
	A list of any modules that this module cannot be used in conjunction with.
	This may be due to name conflicts in the interface, or competition for
	system or program resources, or due to internal limitations of Perl
	(for example, many modules that use source code filters are mutually
	incompatible).
	
	
	=head1 BUGS AND LIMITATIONS
	
	A list of known problems with the module, together with some indication
	whether they are likely to be fixed in an upcoming release.
	
	Also a list of restrictions on the features the module does provide:
	data types that cannot be handled, performance issues and the circumstances
	in which they may arise, practical limitations on the size of data sets,
	special cases that are not (yet) handled, etc.
	
	The initial template usually just has:
	
	There are no known bugs in this module.
	Please report problems to <Maintainer name(s)>  (<contact address>)
	Patches are welcome.
	
	=head1 AUTHOR
	
	<Author name(s)>  (<contact address>)
	
	
	=head1 LICENCE AND COPYRIGHT
	
	Copyright (c) <year> <copyright holder> (<contact address>). All rights reserved.
	
	Followed by whatever licence you wish to release it under.
	For Perl code that is often just:
	
	This module is free software; you can redistribute it and/or
	modify it under the same terms as Perl itself. See perldoc perlartistic.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	
	=cut
	
