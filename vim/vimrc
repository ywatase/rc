scriptencoding utf-8
" vimrc for Y.Watase

""""""""""""""""""""""""""""""
" general
"
""""""""""""""""""""""""""""""
set modeline
set modelines=5
set scrolloff=5
set display=lastline
set pumheight=10

""""""""""""""""""""""""""""""
" vundle
"
""""""""""""""""""""""""""""""

filetype off

" snippetsディレクトリ
let g:snippets_dir = expand('~/.vim/snippets')

" プラグインが実際にインストールされるディレクトリ
let s:dein_dir = expand('~/.vim/dein')
" dein.vim 本体
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

" dein.vim がなければ github から落としてくる
if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

" 設定開始
if dein#load_state(s:dein_dir)

  " プラグインリストを収めた TOML ファイル
  " 予め TOML ファイル（後述）を用意しておく
  let g:rc_dir    = expand('~/.vim/rc')
  let s:toml      = g:rc_dir . '/dein.toml'
  let s:lazy_toml = g:rc_dir . '/dein_lazy.toml'

  call dein#begin(s:dein_dir, [$MYVIMRC, s:toml, s:lazy_toml])

  " TOML を読み込み、キャッシュしておく
  call dein#load_toml(s:toml,      {'lazy': 0})
  call dein#load_toml(s:lazy_toml, {'lazy': 1})

  " 設定終了
  call dein#end()
  call dein#save_state()
endif

" もし、未インストールものものがあったらインストール
if dein#check_install()
	call dein#install()
endif

filetype plugin indent on

augroup MyVimrc
	autocmd!
    autocmd BufRead,BufNewFile *.pl,*.pm,*.cgi,*.t,*psgi :set filetype=perl
    autocmd BufRead,BufNewFile *.tx   :set filetype=xslate
    autocmd BufRead,BufNewFile *.tmpl :set filetype=gohtmltmpl
    autocmd BufRead,BufNewFile *.go   :set filetype=go
    autocmd BufRead,BufNewFile *.clj  :set filetype=clojure
"    autocmd FileType go autocmd BufWritePre <buffer> Fmt
    autocmd BufRead,BufNewFile cpanfile call MyCpanfileSetting()
    autocmd FileType ruby,eruby call MyRubySettings()
    autocmd FileType markdown call MyFoldingSettingOn()
    autocmd FileType javascript call MyJavaScriptSettings()
    autocmd Filetype java call MyJavaSettings()
    autocmd FileType sql call MySQLSettings()
    autocmd BufNewFile,BufRead Changes setf changelog
    autocmd FileType changelog,gitcommit,svn set spell
    autocmd FileType yaml set ai et nobackup
    autocmd FileType c set smartindent et
    autocmd BufNewFile,BufRead Gemfile setl filetype=Gemfile
    autocmd BufWritePost Gemfile call vimproc#system('rbenv ctags')
augroup END

""""""""""""""""""""""""""""""
" keybind
"
""""""""""""""""""""""""""""""
nnoremap Y y$
nnoremap + <C-a>
nnoremap - <C-x>
noremap! <C-h> <backspace>
noremap! <C-d> <delete>
noremap! <C-j> <Esc>
" global
"nmap <C-n> :cn<CR>
"nmap <C-p> :cp<CR>
"nmap 	   :GtagsCursor<CR>
"nmap     :Gtags -r <CR>
" // global
:cnoremap <C-a> <Home>
:cnoremap <C-e> <End>
:cnoremap <C-f> <Right>
:cnoremap <C-b> <Left>
:cnoremap <C-n> <Down>
:cnoremap <C-p> <Up>

nmap <F4> :vertical diffsplit

""""""""""""""""""""""""""""""
" changelog
"
""""""""""""""""""""""""""""""
"Perl Module changelog
let g:changelog_username   = 'ywatase <ywatase@gmail.com>'
let g:changelog_timeformat = '%Y-%m-%d'
let g:changelog_date_entry_search = '^[0-9\.]*\s*%d\_s*%u'
""""""""""""""""""""""""""""""
" Search
"
""""""""""""""""""""""""""""""
" key /, *, #, g*, g#
" incremental search
set incsearch
" highlight search result
set hlsearch

" incsearch-*
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map m/ <Plug>(incsearch-migemo-/)
map m? <Plug>(incsearch-migemo-?)
map mg/ <Plug>(incsearch-migemo-stay)

""""""""""""""""""""""""""""""
" 整形
"
""""""""""""""""""""""""""""""
" tabの見た目の長さを指定
set tabstop=4

" インデントの幅を指定
set shiftwidth=4

" tabをスペースに展開しない
set noexpandtab

" 括弧入力時に対応する括弧を表示 (noshowmatch:表示しない)
set showmatch
set matchtime=1

" コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)
set wildmenu

" テキスト挿入中の自動折り返しを日本語に対応させる
set formatoptions+=mM

" folding
set foldmethod=indent
" Don't autofold on opening file
set foldlevel=100

" 見た目改善
set fillchars=vert:\|
hi Folded gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey30 guifg=Grey80
hi FoldColumn gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue

func! MyFoldingSettingOn ()
	set foldtext=FoldCCtext()
	set foldcolumn=5
endf

func! MyFoldingSettingOff ()
	set foldcolumn=0
	set foldtext=foldtext()
endf

" Align plugin for multibyte charactor
let g:Align_xstrlen=3

" 80カラム目を色付け
if (exists('+colorcolumn'))
	set colorcolumn=80
	highlight ColorColumn ctermbg=9
endif

""""""""""""""""""""""""""""""
" 装飾
"
""""""""""""""""""""""""""""""
" 行番号を表示
set number

" シンタックスハイライトを使用する
syntax on

" Highlight Cursor Line
"set cursorline

" Highlight Cursor Column
"set cursorcolumn

" ファイルを開くとき、改行コードを指定。
set ff=unix

" ステータスラインに改行コードと文字コードを表示
set laststatus=2
set statusline=%y%{MyFfFe()}%{fugitive#statusline()}\ 0x%B(%b)\ %F%m%r%=<%l:%v>\ %3p%%

" colorscheme
set background=dark
colorscheme solarized

set undodir=~/.vim/undo

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 改行コードと文字コードを取得
func! MyFfFe()
  let str = MyFileformat() . ':' . MyFileencoding()
return strlen(str) ? '[' . str . ']' : ''
endf
func! MyFileformat()
  return &fileformat
endf
func! MyFileencoding()
  return (strlen(&fenc) ? &fenc : &enc)
endf
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" filetype setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin indent on
" Load matchit (% to bounce from do to end, etc.)
runtime! macros/matchit.vim
""""""""""""""""""""""""""""""
" ClojureVim
let g:clj_highlight_builtins = 1
let g:clj_paren_rainbow = 1
""""""""""""""""""""""""""""""
" Perl
" 他の設定は ~/.vim/ftplugin/perl/init.vim
func! MyCpanfileSetting ()
	set filetype=cpanfile
	set syntax=perl.cpanfile
endf

""""""""""""""""""""""""""""""
" Ruby
func! MyRubySettings()
    compiler ruby
    set autoindent expandtab sw=2 ts=2 sts=2
endf
""""""""""""""""""""""""""""""
" その他
func! MyJavaScriptSettings ()
  set smartindent et sw=2 ts=2 sts=2
endf
func! MyJavaSettings ()
	set makeprg=javac\ %
	set grepprg=java\ `basename\ %\ .java`
	set smartindent et
endf

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""
" quickrun
""""""""""""""""""""""""""""""
let g:quickrun_config = {}
let g:quickrun_config._ = {'runner' : 'vimproc'}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimshell
""""""""""""""""""""""""""""""
let g:vimshell_execute_file_list = {}
for ext in split('txt,vim,c,h,cpp,d,xml,java', ',')
	let g:vimshell_execute_file_list[ext] = 'vim'
endfor
" ,ipl: replyを非同期で起動
nnoremap <silent> ,ipl :VimShellInteractive reply --cfg .replyrc_vimshell<CR>
" ,irb: irbを非同期で起動
nnoremap <silent> ,irb :VimShellInteractive irb<CR>
" ,ss: 非同期で開いたインタプリタに現在の行を評価させる
vmap <silent> ,ss :VimShellSendString<CR>
" 選択中に,ss: 非同期で開いたインタプリタに選択行を評価させる
nnoremap <silent> ,ss <S-v>:VimShellSendString<CR>

""""""""""""""""""""""""""""""
" neosnippet
""""""""""""""""""""""""""""""
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory = g:snippets_dir

noremap es :NeoSnippetEdit<CR>

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><c-b> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<c-b>"
smap <expr><c-b> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<c-b>"

" For snippet_complete marker
if has('conceal')
	set conceallevel=2 concealcursor=i
endif

let g:snips_author = 'Yusuke Watase'
let g:snips_author_email = 'ywatase@gmail.com'
let g:snips_author_github = 'https://github.com/ywatase'

""""""""""""""""""""""""""""""
" Tohtml.vim
""""""""""""""""""""""""""""""
let g:use_xhtml = 1
let g:html_use_css = 1
let g:html_no_pre = 1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ag
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" type && to search the word in all files in the current dir
nmap <space>* :Ag <c-r>=expand("<cword>")<cr><cr>
nnoremap <space>/ :Ag
""""""""""""""""""""""""""""""
" unite.vim
""""""""""""""""""""""""""""""
" 入力モードで開始する
let g:unite_enable_start_insert=1

let g:unite_source_history_yank_enable = 1
let g:unite_source_rec_async_command='ag --nocolor --nogroup -g ""'
call unite#filters#matcher_default#use(['matcher_fuzzy'])

" search a file in the filetree
nnoremap <space><space> :split<cr> :<C-u>Unite -start-insert  file_rec/async<cr>
" reset not it is <C-l> normally
nnoremap <space>r <Plug>(unite_restart)

" メニュー
let g:unite_source_menu_menus = {
      \   "shortcut" : {
      \       "description" : "sample unite-menu",
      \       "command_candidates" : [
      \           ["edit vimrc", "edit $MYVIMRC"],
      \           ["edit zshrc", "edit $HOME/.zshrc"],
      \           ["unite file_mru", "Unite file_mru"],
      \           ["Unite colorscheme", "Unite -auto-preview colorscheme"],
      \           ["unite output:message", "Unite output:message"],
      \           ["unite mapping", "Unite mapping"],
      \           ["unite bookmark", "Unite bookmark"],
      \       ],
      \   },
      \   "git" : {
      \       "description" : "            gestionar repositorios git                             ⌘ [espacio]g",
      \   }
      \ }
let g:unite_source_menu_menus.git.command_candidates = [
    \   ['tig                                                       ⌘  ,gt', 'normal ,gt'],
    \   ['git status       (Fugitive)                               ⌘  ,gs', 'Gstatus'],
    \   ['git diff         (Fugitive)                               ⌘  ,gd', 'Gdiff'],
    \   ['git add          (Fugitive)                               ⌘  ,ga', 'Git! add'],
    \   ['git add -p       (Fugitive)                               ⌘  ,gA', 'Git! add -p'],
    \   ['git commit       (Fugitive)                               ⌘  ,gc', 'Gcommit'],
    \   ['git log          (Fugitive)                               ⌘  ,gl', 'exe "silent Glog | Unite quickfix"'],
    \   ['git blame        (Fugitive)                               ⌘  ,gb', 'Gblame'],
    \   ['git stage        (Fugitive)                               ⌘  ,gw', 'Gwrite'],
    \   ['git checkout     (Fugitive)                               ⌘  ,go', 'Gread'],
    \   ['git rm           (Fugitive)                               ⌘  ,gr', 'Gremove'],
    \   ['git mv           (Fugitive)                               ⌘  ,gm', 'exe "Gmove " input("destino: ")'],
    \   ['git push         (Fugitive, salida por buffer)            ⌘  ,gp', 'Git! push'],
    \   ['git pull         (Fugitive, salida por buffer)            ⌘  ,gP', 'Git! pull'],
    \   ['git prompt       (Fugitive, salida por buffer)            ⌘  ,gi', 'exe "Git! " input("comando git: ")'],
    \   ['git cd           (Fugitive)', 'Gcd']
    \ ]

" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file file/new directory/new<CR>
" レジスタ一覧
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
" 検索
nnoremap <silent> ,ul :<C-u>Unite line -buffer-name=search -no-quit -start-insert<CR>
" menu: ショートカット
nnoremap <silent> ,us :<C-u>Unite menu:shortcut<CR>
nnoremap <silent> [menu]s :<C-u>Unite menu:shortcut<CR>
" menu: git
nnoremap <silent> ,ug :Unite -silent -start-insert menu:git<CR>
nnoremap <silent> [menu]g :Unite -silent -start-insert menu:git<CR>


augroup unite
	autocmd!
    " ウィンドウを分割して開く
    autocmd FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
    autocmd FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
    " ウィンドウを縦に分割して開く
    autocmd FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
    autocmd FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
    " ESCキーを2回押すと終了する
    autocmd FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
    autocmd FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q
augroup END

""""""""""""""""""""""""""""""
" fugitive.vim
""""""""""""""""""""""""""""""
nnoremap ,gt :!tig
nnoremap ,gs :Gstatus
nnoremap ,gd :Gdiff
nnoremap ,ga :Git! add
nnoremap ,gc :Gcommit
nnoremap ,gb :Gblame
nnoremap ,gw :Gwrite
nnoremap ,go :Gread

""""""""""""""""""""""""""""""
" keisen.vim
""""""""""""""""""""""""""""""
let autodate_format= '%Y/%m/%d'
let autodate_keyword_pre = '\cLast Modified:'

""""""""""""""""""""""""""""""
" taglist.vim : toggle the taglist window
" taglist.vim : define the title texts for Perl
""""""""""""""""""""""""""""""
noremap  <silent> <leader> l    :TlistToggle<CR>
noremap  <silent> <F11>         :Tlist<CR>
inoremap <silent> <F11>  <C-C>  :Tlist<CR>
let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'  " ctagsのコマンド
let Tlist_perl_settings  = 'perl;c:constants;l:labels;p:package;s:subroutines;d:POD'
let Tlist_Show_One_File = 1
let Tlist_Use_Right_Window = 1
let Tlist_Exit_OnlyWindow = 1

""""""""""""""""""""""""""""""
" ref.vim
""""""""""""""""""""""""""""""
let g:ref_source_webdict_sites = {
			\ 'wiktionary': {
			\ 'url': 'http://ja.wiktionary.org/wiki/%s',
			\ 'keyword_encoding': 'utf-8',
			\ 'cache': 1,
			\ },
			\ 'wikipedia:ja':{
			\ 'url': 'http://ja.wikipedia.org/wiki/%s',
			\ 'keyword_encoding': 'utf-8',
			\ 'cache': 1,
			\ },
			\ 'alc':{
			\ 'url': 'http://eow.alc.co.jp/%s/UTF-8/',
			\ 'keyword_encoding': 'utf-8',
			\ 'cache': 1,
			\ }
			\ }

" 出力に対するフィルタ。最初の数行を削除している。
func! g:ref_source_webdict_sites.wiktionary.filter(output)
	return join(split(a:output, "\n")[18 :], "\n")
endf
func! g:ref_source_webdict_sites.alc.filter(output)
	return join(split(a:output, "\n")[34 :], "\n")
endf

let g:ref_source_webdict_sites.default = 'alc'
nmap <F12> :Ref webdict<space>

""""""""""""""""""""""""""""""
" TSkelton
""""""""""""""""""""""""""""""
let g:tskelDateFormat = '%Y/%m/%d'
let g:tskelUserName   = 'Yusuke Wtase'
let g:tskelUserEmail  = 'ywatase@gmail.com'
let g:tskelUserWWW    = 'http://u-suke.org/'
let g:tskelLicense    = 'apache'
""""""""""""""""""""""""""""""
" Vimfiler
""""""""""""""""""""""""""""""
let g:vimfiler_as_default_explorer = 1
""""""""""""""""""""""""""""""
" errormaker.vim
""""""""""""""""""""""""""""""
nnoremap <silent> <Leader>em :ErrorAtCursor<CR>

""""""""""""""""""""""""""""""
" chbuf
""""""""""""""""""""""""""""""
"noremap <silent> <Leader>b :ChangeBuffer<CR>
"noremap <silent> <Leader>B :ChangeMixed<CR>
"noremap <silent> <Leader>f :ChangeFile<CR>
"noremap <silent> <Leader>d :ChangeDirectory<CR>

""""""""""""""""""""""""""""""
" suddendeath
""""""""""""""""""""""""""""""
map X <Plug>(operator-suddendeath)
""""""""""""""""""""""""""""""
" quickhl
""""""""""""""""""""""""""""""
nmap <Space>m <Plug>(quickhl-manual-this)
xmap <Space>m <Plug>(quickhl-manual-this)

nmap <Space>M <Plug>(quickhl-manual-reset)
xmap <Space>M <Plug>(quickhl-manual-reset)

nmap <Space>j <Plug>(quickhl-cword-toggle)
nmap <Space>] <Plug>(quickhl-tag-toggle)

map H <Plug>(operator-quickhl-manual-this-motion)

let g:quickhl_manual_keywords = [
    \ "TODO",
    \ "exit",
    \ "die",
	\ "finish",
	\ {"pattern": '\s\+$', "regexp": 1 },
	\ {"pattern": '\d\{1,3}\.\d\{1,3}\.\d\{1,3}\.\d\{1,3}', "regexp": 1 },
	\ ]

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Emmet
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:user_emmet_settings = {
  \  'lang' : 'ja',
  \  'custom_expands1' : {
  \    '^\%(lorem\|lipsum\)\(\d*\)$' : function('emmet#lorem#ja#expand'),
  \  },
  \ }
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" chrome
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let OSTYPE = system('uname')
if OSTYPE =~# "Darwin\n"
	command! -bar -nargs=1 -complete=file ChromeOpen silent !open -a "Google Chrome" <args>
	command! -bar ChromeReload silent !osascript -e 'tell application "Google Chrome" to reload active tab of window 1'
	command! -bar ChromeStartObserve autocmd BufWritePost <buffer> ChromeReload
	command! -bar ChromeStartObserveOnce ChromeStopObserve | autocmd BufWritePost <buffer> ChromeReload
	command! -bar ChromeStopObserve autocmd! BufWritePost <buffer>
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" memolist
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:memolist_memo_date   = '%Y-%m-%d %H:%M'
let g:memolist_memo_suffix = 'md'
let g:memolist_unite = 1
let g:memolist_unite_option = '-start-insert'
let g:memolist_qfixgrep = 1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" jekyll
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:jekyll_path = $HOME . '/git/github/ywatase/'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ToggleCase
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent> ,c :<C-u>call ToggleCase()<CR>

func! LowerCamelCase (str)
	if !strlen(a:str)
		return
	endif
	let l:word_list = split(a:str , '_')
	let l:camel_case = l:word_list[0]
	for word in l:word_list[1:]
		let l:camel_case = l:camel_case . toupper(word[0]) . word[1:]
	endfor
	return l:camel_case
endfunc

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Import
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" load settings
set runtimepath+=~/.vim/
runtime! rc/plugins/*.vim
