" vimrc for Y.Watase
" Last Modified:  2013/06/22.

""""""""""""""""""""""""""""""
" general
"
""""""""""""""""""""""""""""""
set nocompatible          " We're running Vim, not Vi!
set modeline
set modelines=5

set scrolloff=5

""""""""""""""""""""""""""""""
" vundle
"
""""""""""""""""""""""""""""""

filetype off

if has('vim_starting')
	set runtimepath+=~/.vim/neobundle.vim/
endif
call neobundle#rc(expand('~/.vim/bundle/'))

" original repos on github
" Bundle 'tpope/vim-fugitive'

" " vim-scripts repos
NeoBundle 'Align'
NeoBundle 'autodate.vim'
NeoBundle 'BufOnly.vim'
NeoBundle 'EnhCommentify.vim'
NeoBundle 'nginx.vim'
NeoBundle 'ack.vim'
NeoBundle 'sudo.vim'
NeoBundle 'vcscommand.vim'
NeoBundle 'surround.vim'
NeoBundle 'taglist.vim'
NeoBundle 'errormarker.vim'

" xmledit
" make symbolic link by yourself.
" conflict EnhCommentify.vim.
" need comment out <LocalLeader>x
NeoBundle 'sukima/xmledit.git', {
			\ 'build' : {
			\     'windows' : 'echo "Sorry, cannot setup automatically."',
			\     'cygwin' : '../../bundle_local/setup',
			\     'mac' : '../../bundle_local/setup',
			\     'unix' : '../../bundle_local/setup',
			\ 	},
			\ }

" non github repos
" Bundle 'git://git.wincent.com/command-t.git'
NeoBundle 'mattn/benchvimrc-vim.git'
NeoBundle 'adaszko/chbuf.vim'

" reference viewer
NeoBundle 'thinca/vim-ref.git'
NeoBundle 'thinca/vim-quickrun.git'
NeoBundle 'motemen/git-vim.git'
NeoBundle 'scrooloose/nerdtree.git'
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimproc.git', {
			\ 'build' : {
			\     'windows' : 'echo "Sorry, cannot update vimproc binary file in Windows."',
			\     'cygwin' : 'make -f make_cygwin.mak',
			\     'mac' : 'make -f make_mac.mak',
			\     'unix' : 'make -f make_unix.mak',
			\   },
			\ }
NeoBundle 'Shougo/vimshell.git'
NeoBundle 'Shougo/vimfiler.git'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'bartekd/vim-dart'
NeoBundle 'mattn/emmet-vim'
NeoBundleLazy 'ujihisa/unite-colorscheme.git'
NeoBundleLazy 'ujihisa/unite-font.git'
" javascript
NeoBundle 'bigfish/vim-nodelint.git', {
			\ 'build' : {
			\     'windows' : 'echo "Sorry, cannot setup automatically."',
			\     'cygwin' : '../../bundle_local/setup',
			\     'mac' : '../../bundle_local/setup',
			\     'unix' : '../../bundle_local/setup',
			\ 	},
			\ }
" SQL
NeoBundleLazy 'SQLUtilities'
" Clojure
NeoBundleLazy 'jondistad/vimclojure.git'
" Perl
NeoBundleLazy 'vim-perl/vim-perl.git'
NeoBundleLazy 'ywatase/flymake-perl.vim.git'
NeoBundleLazy 'ywatase/perldoc-vim.git'
NeoBundleLazy 'c9s/perlomni.vim.git'
" Ruby
NeoBundleLazy 'vim-ruby/vim-ruby'
NeoBundleLazy 'tpope/vim-rails.git'
" for markdown
NeoBundle 'hallison/vim-markdown.git'
NeoBundle 'tyru/open-browser.vim.git'
" for Japanese Help
NeoBundle 'vim-jp/vimdoc-ja.git'
" こんな感じで使う
" help {word}@ja
" helpgrep {word}@en
" 英語を優先したい場合
" :set helplang=en,ja

NeoBundle 'tsukkee/lingr-vim.git'


" colorscheme
NeoBundleLazy 'jellybeans.vim'
NeoBundleLazy 'moss'
NeoBundleLazy 'tir_black'
NeoBundleLazy 'softblue'
NeoBundleLazy 'WuYe'
NeoBundleLazy 'mrkn256.vim'
NeoBundleLazy 'desert256.vim'
NeoBundleLazy 'wombat256.vim'
NeoBundleLazy 'yuroyoro/yuroyoro256.vim.git'
NeoBundleLazy 'croaker/mustang-vim.git'
NeoBundleLazy 'tomasr/molokai.git'

filetype plugin indent on

augroup MyVimrc
	autocmd!
	autocmd FileType perl call MyPerlSetting()
	autocmd BufNewFile,BufRead *.clj NeoBundleSource
				\ vimclojure
augroup END

""""""""""""""""""""""""""""""
" keybind
"
""""""""""""""""""""""""""""""
noremap! <C-h> <backspace>
noremap! <C-d> <delete>
" global
"nmap <C-n> :cn<CR>
"nmap <C-p> :cp<CR>
"nmap 	   :GtagsCursor<CR>
"nmap     :Gtags -r <CR>
" // global
:cnoremap <C-a> <Home>
:cnoremap <C-e> <End>
:cnoremap <C-f> <Right>
:cnoremap <C-b> <Left>
:cnoremap <C-n> <Down>
:cnoremap <C-p> <Up>

nmap <F4> :vertical diffsplit

""""""""""""""""""""""""""""""
" changelog
"
""""""""""""""""""""""""""""""
"Perl Module changelog
:au BufNewFile,BufRead Changes setf changelog
let g:changelog_username   = "ywatase <ywatase@gmail.com>"
let g:changelog_timeformat = "%Y-%m-%d"
let g:changelog_date_entry_search = '^[0-9\.]*\s*%d\_s*%u'
autocmd FileType changelog set spell
""""""""""""""""""""""""""""""
" Search
"
""""""""""""""""""""""""""""""
" key /, *, #, g*, g#
" incremental search
set incsearch
" highlight search result
set hlsearch

""""""""""""""""""""""""""""""
" 整形
"
""""""""""""""""""""""""""""""
" tabの見た目の長さを指定
set tabstop=4

" インデントの幅を指定
set shiftwidth=4

" tabをスペースに展開しない
set noexpandtab

" 括弧入力時に対応する括弧を表示 (noshowmatch:表示しない)
set showmatch

" コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)
set wildmenu

" テキスト挿入中の自動折り返しを日本語に対応させる
set formatoptions+=mM

" folding
set foldmethod=indent
" Don't autofold on opening file
set foldlevel=100

" Align plugin for multibyte charactor
let g:Align_xstrlen=3

""""""""""""""""""""""""""""""
" 装飾
"
""""""""""""""""""""""""""""""
" 行番号を表示
set number

" シンタックスハイライトを使用する
syntax on

" Highlight Cursor Line
"set cursorline

" Highlight Cursor Column
"set cursorcolumn

"---------------------------------------------------------------------------
" 日本語対応のための設定:
"---------------------------------------------------------------------------
" 文字コードの自動認識
" from http://www.kawaz.jp/pukiwiki/?vim#cb691f26
if !(has('win32'))
	set termencoding=utf-8
	set encoding=utf-8
	set fileencoding=utf-8
	set fileencodings=utf-8,cp932
endif

if &encoding !=# 'utf-8'
  set encoding=japan
  set fileencoding=japan
endif
if has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'
  " iconvがeucJP-msに対応しているかをチェック
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'eucjp-ms'
    let s:enc_jis = 'iso-2022-jp-3'
  " iconvがJISX0213に対応しているかをチェック
  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'euc-jisx0213'
    let s:enc_jis = 'iso-2022-jp-3'
  endif
  " fileencodingsを構築
  if &encoding ==# 'utf-8'
    let s:fileencodings_default = &fileencodings

    " from http://d.hatena.ne.jp/heavenshell/20080105/1199536148
    if !(has('win32'))
      let &fileencodings = s:enc_jis .','. s:enc_euc
      let &fileencodings = &fileencodings .','. s:fileencodings_default
    else
      let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
      let &fileencodings = &fileencodings .','. s:fileencodings_default
    endif

    unlet s:fileencodings_default
  else
    let &fileencodings = &fileencodings .','. s:enc_jis
    set fileencodings+=utf-8,ucs-2le,ucs-2
    if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
      set fileencodings+=cp932
      set fileencodings-=euc-jp
      set fileencodings-=euc-jisx0213
      set fileencodings-=eucjp-ms
      let &encoding = s:enc_euc
      let &fileencoding = s:enc_euc
    else
      let &fileencodings = &fileencodings .','. s:enc_euc
    endif
  endif
  " 定数を処分
  unlet s:enc_euc
  unlet s:enc_jis
endif
" 日本語を含まない場合は fileencoding に encoding を使うようにする
if has('autocmd')
  func! AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endf
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif
" 改行コードの自動認識
set fileformats=unix,dos,mac
" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif


" メッセージを日本語にする (Windowsでは自動的に判断・設定されている)
if !(has('win32') || has('mac')) && has('multi_lang')
  if !exists('$LANG') || $LANG.'X' ==# 'X'
    if !exists('$LC_CTYPE') || $LC_CTYPE.'X' ==# 'X'
      language ctype ja_JP.eucJP
    endif
    if !exists('$LC_MESSAGES') || $LC_MESSAGES.'X' ==# 'X'
      language messages ja_JP.eucJP
    endif
  endif
endif

" for utf8
"set encoding=utf-8
"set fileencodings=iso-2022-jp,cp932,euc-jp,utf-8,ucs-2le,ucs-2

" ファイルを開くとき、改行コードを指定。
set ff=unix

" ステータスラインに改行コードと文字コードを表示
set laststatus=2
set statusline=%y%{GetStatusEx()}\ 0x%B(%b)%F%m%r%=<%c:%l>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 改行コードと文字コードを取得
func! GetStatusEx()
let str = ''
let str = str . '' . &fileformat . ']'
if has('multi_byte') && &fileencoding != ''
let str = '[' . &fileencoding . ':' . str
endif
return str
endf

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" filetype setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin indent on
" Load matchit (% to bounce from do to end, etc.)
runtime! macros/matchit.vim
autocmd FileType gitcommit,svn set spell

""""""""""""""""""""""""""""""
" ClojureVim
let g:clj_highlight_builtins = 1
let g:clj_paren_rainbow = 1
""""""""""""""""""""""""""""""
" Perl
" 他の設定は ~/.vim/ftplugin/perl/init.vim
autocmd BufRead,BufNewFile *.pl,*.pm,*.cgi,*.t,*psgi,cpanfile :set filetype=perl
func! MyPerlSetting  ()
	let s:perlenv  = 'PERL5LIB=\"'. $PERL5LIB .'\"'
	let g:perlomni_perl = escape('env ' . s:perlenv . ' perl', ' \();$|')
	NeoBundleSource
				\ vim-perl
				\ flymake-perl.vim
				\ perldoc-vim
"				\ perlomni.vim
endf

""""""""""""""""""""""""""""""
" Ruby
autocmd FileType ruby,eruby call MyRubySettings()
func! MyRubySettings()
    compiler ruby
    set autoindent expandtab
	NeoBundleSource vim-rails
				\ vim-ruby
endf
au BufNewFile,BufRead Gemfile setl filetype=Gemfile
au BufWritePost Gemfile call vimproc#system('rbenv ctags')

autocmd FileType yaml set ai et
autocmd FileType c set smartindent et
autocmd FileType javascript set smartindent et sw=2 ts=2 sts=2
autocmd Filetype java call MyJavaSettings()
func! MyJavaSettings ()
	set makeprg=javac\ %
	set grepprg=java\ `basename\ %\ .java`
	set smartindent et
endf
autocmd FileType sql call MySQLSettings()
func! MySQLSettings ()
	NeoBundleSource SQLUtilities
endf


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""
" quickrun
""""""""""""""""""""""""""""""
let g:quickrun_config = {}
let g:quickrun_config._ = {'runner' : 'vimproc'}
let g:quickrun_config['markdown'] = {
	  \ 'type': 'markdown/Markdown.pl',
	  \ 'outputter': 'browser',
	  \ }
"     \ 'type': 'markdown/pandoc',
"     \ 'outputter': 'browser',
"     \ 'cmdopt': '-s'
"     \ }
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimshell
""""""""""""""""""""""""""""""
let g:vimshell_execute_file_list = {}
for ext in split('txt,vim,c,h,cpp,d,xml,java', ',')
	let g:vimshell_execute_file_list[ext] = 'vim'
endfor
""""""""""""""""""""""""""""""
" neocomplcache.vim
""""""""""""""""""""""""""""""
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
"let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
let g:neocomplcache_snippets_dir = $HOME . '/.vim/snippets/'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {}
"let g:neocomplcache_dictionary_filetype_lists = {
"    \ 'default'  : '',
"    \ 'vimshell' : $HOME.'/.vimshell_hist',
"    \ 'scheme'   : $HOME.'/.gosh_completions'
"    \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
imap <C-k>     <Plug>(neocomplcache_snippets_expand)
smap <C-k>     <Plug>(neocomplcache_snippets_expand)
"inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()


map cr <ESC>:NeoComplCacheCachingInclude<CR><ESC>:NeoComplCacheCachingBuffer<CR>
noremap es :<C-u>NeoComplCacheEditSnippets<CR>

" SuperTab like snippets behavior.
imap <expr><c-b> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<c-b>"
smap <expr><c-b> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<c-b>"


" Recommended key-mappings.
" <CR>: close popup and save indent.
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
"" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
"inoremap <expr><C-y>  neocomplcache#close_popup()
"inoremap <expr><C-e>  neocomplcache#cancel_popup()

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<TAB>"
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
let g:neocomplcache_omni_patterns = {}
endif
"let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.perl = '[^. \t]->\h\w*\|\h\w*::'

""""""""""""""""""""""""""""""
" Tohtml.vim
"
""""""""""""""""""""""""""""""
let g:use_xhtml = 1
let g:html_use_css = 1
let g:html_no_pre = 1
""""""""""""""""""""""""""""""
" unite.vim
" 入力モードで開始する
""""""""""""""""""""""""""""""
" let g:unite_enable_start_insert=1
" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q

""""""""""""""""""""""""""""""
" keisen.vim
""""""""""""""""""""""""""""""
let autodate_format= '%Y/%m/%d'
let autodate_keyword_pre = '\cLast Modified:'

""""""""""""""""""""""""""""""
" taglist.vim : toggle the taglist window
" taglist.vim : define the title texts for Perl
""""""""""""""""""""""""""""""
noremap  <silent> <leader> l    :TlistToggle<CR>
noremap  <silent> <F11>         :Tlist<CR>
inoremap <silent> <F11>  <C-C>  :Tlist<CR>
let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"  " ctagsのコマンド
let Tlist_perl_settings  = 'perl;c:constants;l:labels;p:package;s:subroutines;d:POD'
let Tlist_Show_One_File = 1
let Tlist_Use_Right_Window = 1
let Tlist_Exit_OnlyWindow = 1

""""""""""""""""""""""""""""""
" ref.vim
"
""""""""""""""""""""""""""""""
let g:ref_source_webdict_sites = {
			\ 'wiktionary': {
			\ 'url': 'http://ja.wiktionary.org/wiki/%s',
			\ 'keyword_encoding': 'utf-8',
			\ 'cache': 1,
			\ },
			\ 'wikipedia:ja':{
			\ 'url': 'http://ja.wikipedia.org/wiki/%s',
			\ 'keyword_encoding': 'utf-8',
			\ 'cache': 1,
			\ },
			\ 'alc':{
			\ 'url': 'http://eow.alc.co.jp/%s/UTF-8/',
			\ 'keyword_encoding': 'utf-8',
			\ 'cache': 1,
			\ }
			\ }

" 出力に対するフィルタ。最初の数行を削除している。
func! g:ref_source_webdict_sites.wiktionary.filter(output)
	return join(split(a:output, "\n")[18 :], "\n")
endf
func! g:ref_source_webdict_sites.alc.filter(output)
	return join(split(a:output, "\n")[34 :], "\n")
endf

let g:ref_source_webdict_sites.default = 'alc'
nmap <F12> :Ref webdict<space>

""""""""""""""""""""""""""""""
" TSkelton
""""""""""""""""""""""""""""""
let g:tskelDateFormat = '%Y/%m/%d'
let g:tskelUserName   = 'Yusuke Wtase'
let g:tskelUserEmail  = 'ywatase@gmail.com'
let g:tskelUserWWW    = 'http://u-suke.org/'
let g:tskelLicense    = 'apache'
""""""""""""""""""""""""""""""
" Vimfiler
""""""""""""""""""""""""""""""
let g:vimfiler_as_default_explorer = 1
""""""""""""""""""""""""""""""
" errormaker.vim
""""""""""""""""""""""""""""""
nmap <silent> <unique> <Leader>em :ErrorAtCursor<CR>
""""""""""""""""""""""""""""""
" vim-nodelint
""""""""""""""""""""""""""""""
let g:NodelintConfig = $HOME . '/.vim/bundle_local/vim-nodelint/config.js'

""""""""""""""""""""""""""""""
" nerdtree
""""""""""""""""""""""""""""""
nnoremap <silent> <C-e> <ESC><ESC> :NERDTreeToggle<CR>

""""""""""""""""""""""""""""""
" chbuf
""""""""""""""""""""""""""""""
noremap <silent> <Leader>b :ChangeBuffer<CR>
noremap <silent> <Leader>B :ChangeMixed<CR>
noremap <silent> <Leader>f :ChangeFile<CR>
noremap <silent> <Leader>d :ChangeDirectory<CR>
