scriptencoding utf-8
" vimrc for Y.Watase

""""""""""""""""""""""""""""""
" general
"
""""""""""""""""""""""""""""""
set modeline
set modelines=5
set scrolloff=5
set display=lastline
set pumheight=10

""""""""""""""""""""""""""""""
" vundle
"
""""""""""""""""""""""""""""""

filetype off

" snippetsディレクトリ
let g:snippets_dir = expand('~/.vim/snippets')
runtime! rc/plug.vim

filetype plugin indent on

augroup MyVimrc
	autocmd!
    autocmd BufRead,BufNewFile *.pl,*.pm,*.cgi,*.t,*psgi :set filetype=perl
    autocmd BufRead,BufNewFile *.tx   :set filetype=xslate
    autocmd BufRead,BufNewFile *.tmpl :set filetype=gohtmltmpl
    autocmd BufRead,BufNewFile *.go   :set filetype=go
    autocmd BufRead,BufNewFile *.clj  :set filetype=clojure
    autocmd BufRead,BufNewFile main.yml :set filetype=ansible.yaml
"    autocmd FileType go autocmd BufWritePre <buffer> Fmt
    autocmd BufRead,BufNewFile cpanfile call MyCpanfileSetting()
    autocmd FileType ruby,eruby call MyRubySettings()
    autocmd FileType markdown call MyFoldingSettingOn()
    autocmd FileType javascript call MyJavaScriptSettings()
    autocmd Filetype java call MyJavaSettings()
    autocmd FileType sql call MySQLSettings()
    autocmd BufNewFile,BufRead Changes setf changelog
    autocmd FileType changelog,gitcommit,svn set spell
    autocmd FileType yaml set ai et nobackup sw=2 ts=2 sts=2
    autocmd FileType c set smartindent et
    autocmd FileType coffee set smartindent et sw=2 ts=2 sts=2
    autocmd BufNewFile,BufRead Gemfile setl filetype=Gemfile
    autocmd BufWritePost Gemfile call vimproc#system('rbenv ctags')
augroup END

""""""""""""""""""""""""""""""
" keybind
"
""""""""""""""""""""""""""""""
nnoremap Y y$
nnoremap + <C-a>
nnoremap - <C-x>
noremap! <C-h> <backspace>
noremap! <C-d> <delete>
noremap! <C-j> <Esc>
" global
"nmap <C-n> :cn<CR>
"nmap <C-p> :cp<CR>
"nmap 	   :GtagsCursor<CR>
"nmap     :Gtags -r <CR>
" // global
:cnoremap <C-a> <Home>
:cnoremap <C-e> <End>
:cnoremap <C-f> <Right>
:cnoremap <C-b> <Left>
:cnoremap <C-n> <Down>
:cnoremap <C-p> <Up>

nmap <F4> :vertical diffsplit

" completion
"
inoremap <Plug>(my-complete) <Nop>
imap ,x <Plug>(my-complete)

" 行(全体)補完: CTRL-X CTRL-L
" 検索対象はcompleteオプションで設定可能
nnoremap <silent> <Plug>(my-complete)l <C-X><C-L>

" 局所キーワード補完: CTRL-X CTRL-N / CTRL-X CTRL-P
nnoremap <silent> <Plug>(my-complete)n <C-X><C-N>
nnoremap <silent> <Plug>(my-complete)p <C-X><C-P>

"辞書補完: CTRL-X CTRL-K
"dictionaryオプションで設定したファイルから twist で始まる単語を補完
"dictionaryオプションに使用するファイルを設定する必要がある(デフォルトは未設定)
" set dictionary=/usr/share/dict/words
nnoremap <silent> <Plug>(my-complete)k <C-X><C-K>

"シソーラス補完: CTRL-X CTRL-T
" thesaurusオプションに使用するファイルを設定する必要がある(デフォルトは未設定)
" set thesaurus=/usr/share/mythes/th_en_US_v2.dat
nnoremap <silent> <Plug>(my-complete)T <C-X><C-T>

" パスパターン補完: CTRL-X CTRL-I
" インクルードしているSocket.pmから getpr で始まるキーワードを補完(perl)
" 検索対象はincludeオプションとpathオプションで設定可能
nnoremap <silent> <Plug>(my-complete)i <C-X><C-I>

" タグ補完: CTRL-X CTRL-]
" 読み込むtagsファイルをtagsオプションで設定可能
nnoremap <silent> <Plug>(my-complete)] <C-X><C-]>

" ファイル名補完: CTRL-X CTRL-F
nnoremap <silent> <Plug>(my-complete)f <C-X><C-f>

" 定義補完: CTRL-X CTRL-D
" mixinを補完(sass)
" 検索対象はdefineオプションとincludeオプションとpathオプションで設定可能
nnoremap <silent> <Plug>(my-complete)f <C-X><C-D>

" コマンドライン補完: CTRL-X CTRL-V
" vimのコマンドと関数を補完
nnoremap <silent> <Plug>(my-complete)v <C-X><C-V>

" ユーザー定義補完: CTRL-X CTRL-U
" completefuncオプションを設定したCompleteMonthsで月の名前を補完
" omnifuncオプションに設定されたjavascriptcomplete#CompleteJSでDate型のメソッドを補完(javascript)
nnoremap <silent> <Plug>(my-complete)u <C-X><C-U>

" オムニ補完: CTRL-X CTRL-O
nnoremap <silent> <Plug>(my-complete)o <C-X><C-O>
" スペリング補完: CTRL-X s / CTRL-X CTRL-S
" 頭文字が大文字になっていない単語と綴りが間違っている単語の修正候補を補完
nnoremap <silent> <Plug>(my-complete)s <C-X><C-S>
""""""""""""""""""""""""""""""
" changelog
"
""""""""""""""""""""""""""""""
"Perl Module changelog
let g:changelog_username   = 'ywatase <ywatase@gmail.com>'
let g:changelog_timeformat = '%Y-%m-%d'
let g:changelog_date_entry_search = '^[0-9\.]*\s*%d\_s*%u'
""""""""""""""""""""""""""""""
" Search
"
""""""""""""""""""""""""""""""
" key /, *, #, g*, g#
" incremental search
set incsearch
" highlight search result
set hlsearch

" incsearch-*
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map m/ <Plug>(incsearch-migemo-/)
map m? <Plug>(incsearch-migemo-?)
map mg/ <Plug>(incsearch-migemo-stay)

""""""""""""""""""""""""""""""
" 整形
"
""""""""""""""""""""""""""""""
" tabの見た目の長さを指定
set tabstop=4

" インデントの幅を指定
set shiftwidth=4

" tabをスペースに展開しない
set noexpandtab

" 括弧入力時に対応する括弧を表示 (noshowmatch:表示しない)
set showmatch
set matchtime=1

" コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)
set wildmenu

" テキスト挿入中の自動折り返しを日本語に対応させる
set formatoptions+=mM

" folding
set foldmethod=indent
" Don't autofold on opening file
set foldlevel=100

" 見た目改善
set fillchars=vert:\|
hi Folded gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey30 guifg=Grey80
hi FoldColumn gui=bold term=standout ctermbg=LightGrey ctermfg=DarkBlue guibg=Grey guifg=DarkBlue

func! MyFoldingSettingOn ()
	set foldtext=FoldCCtext()
	set foldcolumn=5
endf

func! MyFoldingSettingOff ()
	set foldcolumn=0
	set foldtext=foldtext()
endf

" Align plugin for multibyte charactor
let g:Align_xstrlen=3

" 80カラム目を色付け
if (exists('+colorcolumn'))
	set colorcolumn=80
	highlight ColorColumn ctermbg=9
endif

""""""""""""""""""""""""""""""
" 装飾
"
""""""""""""""""""""""""""""""
" 行番号を表示
set number

" シンタックスハイライトを使用する
syntax on

" Highlight Cursor Line
"set cursorline

" Highlight Cursor Column
"set cursorcolumn

" ファイルを開くとき、改行コードを指定。
set ff=unix

" ステータスラインに改行コードと文字コードを表示
set laststatus=2
set statusline=%y%{MyFfFe()}%{fugitive#statusline()}\ 0x%B(%b)\ %F%m%r%=<%l:%v>\ %3p%%

" colorscheme
set background=dark
colorscheme solarized

set undodir=~/.vim/undo

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 改行コードと文字コードを取得
func! MyFfFe()
  let str = MyFileformat() . ':' . MyFileencoding()
return strlen(str) ? '[' . str . ']' : ''
endf
func! MyFileformat()
  return &fileformat
endf
func! MyFileencoding()
  return (strlen(&fenc) ? &fenc : &enc)
endf
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" filetype setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin indent on
" Load matchit (% to bounce from do to end, etc.)
runtime! macros/matchit.vim
""""""""""""""""""""""""""""""
" ClojureVim
let g:clj_highlight_builtins = 1
let g:clj_paren_rainbow = 1
""""""""""""""""""""""""""""""
" Perl
" 他の設定は ~/.vim/ftplugin/perl/init.vim
func! MyCpanfileSetting ()
	set filetype=cpanfile
	set syntax=perl.cpanfile
endf

""""""""""""""""""""""""""""""
" Ruby
func! MyRubySettings()
    compiler ruby
    set autoindent expandtab sw=2 ts=2 sts=2
endf
""""""""""""""""""""""""""""""
" その他
func! MyJavaScriptSettings ()
  set smartindent et sw=2 ts=2 sts=2
endf
func! MyJavaSettings ()
	set makeprg=javac\ %
	set grepprg=java\ `basename\ %\ .java`
	set smartindent et
endf

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""
" quickrun
""""""""""""""""""""""""""""""
let g:quickrun_config = {}
let g:quickrun_config._ = {'runner' : 'vimproc'}

""""""""""""""""""""""""""""""
" neosnippet
""""""""""""""""""""""""""""""
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory = g:snippets_dir

noremap es :NeoSnippetEdit<CR>

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><c-b> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<c-b>"
smap <expr><c-b> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<c-b>"

" For snippet_complete marker
if has('conceal')
	set conceallevel=2 concealcursor=i
endif

let g:snips_author = 'Yusuke Watase'
let g:snips_author_email = 'ywatase@gmail.com'
let g:snips_author_github = 'https://github.com/ywatase'

""""""""""""""""""""""""""""""
" Tohtml.vim
""""""""""""""""""""""""""""""
let g:use_xhtml = 1
let g:html_use_css = 1
let g:html_no_pre = 1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" fzf
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ag
nnoremap <silent> ,ua :<C-u>Ag
" バッファ一覧
nnoremap <silent> ,ub :<C-u>Buffers<CR>
" ファイル一覧(Vaffle)
nnoremap ,uf :<C-u>Vaffle<CR>
" ファイル一覧(fzf)
nnoremap ,uF :<C-u>Files<Space>%:p:h
" カラー一覧
nnoremap <silent> ,uc :<C-u>Colors<CR>
" レジスタ一覧
"nnoremap <silent> ,ur :<C-u>
" タグ一覧
nnoremap <silent> ,ut :<C-u>Tags
" ヒストリ
nnoremap <silent> ,uh :<C-u>History<CR>
" MRU
nnoremap <silent> ,uu :<C-u>History<CR>
nnoremap ,uo :<C-u>cd %:p:h<CR>

""""""""""""""""""""""""""""""
" fugitive.vim
""""""""""""""""""""""""""""""
nnoremap <Plug>(my-git) <Nop>
nmap <Leader>g <Plug>(my-git)
nnoremap <silent> <Plug>(my-git)t :!tig
nnoremap <silent> <Plug>(my-git)S :Gstatus
nnoremap <silent> <Plug>(my-git)d :Gdiff
nnoremap <silent> <Plug>(my-git)a :Git! add
nnoremap <silent> <Plug>(my-git)c :Gcommit
nnoremap <silent> <Plug>(my-git)b :Gblame
nnoremap <silent> <Plug>(my-git)w :Gwrite
nnoremap <silent> <Plug>(my-git)o :Gread

" git status
nnoremap <silent> <Plug>(my-git)s :<C-u>GFiles?<CR>
" git ls-files
nnoremap <silent> <Plug>(my-git)f :<C-u>GFiles<CR>

""""""""""""""""""""""""""""""
" switch
""""""""""""""""""""""""""""""
nnoremap <Plug>(my-switch) <Nop>
nmap <Leader>s <Plug>(my-switch)
nnoremap <silent> <Plug>(my-switch)s :<C-u>setl spell! spell?<CR>
nnoremap <silent> <Plug>(my-switch)l :<C-u>setl list! list?<CR>
nnoremap <silent> <Plug>(my-switch)t :<C-u>setl expandtab! expandtab?<CR>
nnoremap <silent> <Plug>(my-switch)w :<C-u>setl wrap! wrap?<CR>
nnoremap <silent> <Plug>(my-switch)p :<C-u>setl paste! paste?<CR>
nnoremap <silent> <Plug>(my-switch)b :<C-u>setl scrollbind! scrollbind?<CR>
nnoremap <silent> <Plug>(my-switch)y :call <SID>toggle_syntax()<CR>
function! s:toggle_syntax() abort
  if exists('g:syntax_on')
    syntax off
    redraw
    echo 'syntax off'
  else
    syntax on
    redraw
    echo 'syntax on'
  endif
endfunction
""""""""""""""""""""""""""""""
" reload vimrc
""""""""""""""""""""""""""""""
if has('vim_starting')
  function s:reload_vimrc() abort
    execute printf('source %s', $MYVIMRC)
    if has('gui_running')
      execute printf('source %s', $MYGVIMRC)
    endif
    redraw
    echo printf('.vimrc/.gvimrc has reloaded (%s).', strftime('%c'))
  endfunction
endif
nmap <silent> <Plug>(my-reload-vimrc) :<C-u>call <SID>reload_vimrc()<CR>
nmap <Leader><Leader>r <Plug>(my-reload-vimrc)
""""""""""""""""""""""""""""""
" keisen.vim
""""""""""""""""""""""""""""""
let autodate_format= '%Y/%m/%d'
let autodate_keyword_pre = '\cLast Modified:'

""""""""""""""""""""""""""""""
" taglist.vim : toggle the taglist window
" taglist.vim : define the title texts for Perl
""""""""""""""""""""""""""""""
noremap  <silent> <leader> l    :TlistToggle<CR>
noremap  <silent> <F11>         :Tlist<CR>
inoremap <silent> <F11>  <C-C>  :Tlist<CR>
let Tlist_Ctags_Cmd = '/usr/local/bin/ctags'  " ctagsのコマンド
let Tlist_perl_settings  = 'perl;c:constants;l:labels;p:package;s:subroutines;d:POD'
let Tlist_Show_One_File = 1
let Tlist_Use_Right_Window = 1
let Tlist_Exit_OnlyWindow = 1

""""""""""""""""""""""""""""""
" ref.vim
""""""""""""""""""""""""""""""
let g:ref_source_webdict_sites = {
			\ 'wiktionary': {
			\ 'url': 'http://ja.wiktionary.org/wiki/%s',
			\ 'keyword_encoding': 'utf-8',
			\ 'cache': 1,
			\ },
			\ 'wikipedia:ja':{
			\ 'url': 'http://ja.wikipedia.org/wiki/%s',
			\ 'keyword_encoding': 'utf-8',
			\ 'cache': 1,
			\ },
			\ 'alc':{
			\ 'url': 'http://eow.alc.co.jp/%s/UTF-8/',
			\ 'keyword_encoding': 'utf-8',
			\ 'cache': 1,
			\ }
			\ }

" 出力に対するフィルタ。最初の数行を削除している。
func! g:ref_source_webdict_sites.wiktionary.filter(output)
	return join(split(a:output, "\n")[18 :], "\n")
endf
func! g:ref_source_webdict_sites.alc.filter(output)
	return join(split(a:output, "\n")[34 :], "\n")
endf

let g:ref_source_webdict_sites.default = 'alc'
nmap <F12> :Ref webdict<space>

""""""""""""""""""""""""""""""
" TSkelton
""""""""""""""""""""""""""""""
let g:tskelDateFormat = '%Y/%m/%d'
let g:tskelUserName   = 'Yusuke Watase'
let g:tskelUserEmail  = 'ywatase@gmail.com'
let g:tskelUserWWW    = 'http://u-suke.org/'
let g:tskelLicense    = 'apache'
""""""""""""""""""""""""""""""
" errormaker.vim
""""""""""""""""""""""""""""""
nnoremap <silent> <Leader>em :ErrorAtCursor<CR>

""""""""""""""""""""""""""""""
" suddendeath
""""""""""""""""""""""""""""""
map X <Plug>(operator-suddendeath)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Emmet
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:user_emmet_leader_key='<C-y>'
let g:user_emmet_settings = {
  \  'lang' : 'ja',
  \  'custom_expands1' : {
  \    '^\%(lorem\|lipsum\)\(\d*\)$' : function('emmet#lorem#ja#expand'),
  \  },
  \ }
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" chrome
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! -bar -nargs=1 -complete=file ChromeOpen silent !open -a "Google Chrome" <args>
command! -bar ChromeReload silent !osascript -e 'tell application "Google Chrome" to reload active tab of window 1'
command! -bar ChromeStartObserve autocmd BufWritePost <buffer> ChromeReload
command! -bar ChromeStartObserveOnce ChromeStopObserve | autocmd BufWritePost <buffer> ChromeReload
command! -bar ChromeStopObserve autocmd! BufWritePost <buffer>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" memolist
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:memolist_memo_date   = '%Y-%m-%d %H:%M'
let g:memolist_memo_suffix = 'md'
let g:memolist_qfixgrep = 1
let g:memolist_ex_cmd = 'fzf'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" jekyll
" See :help jekyll-commands.
" See :help jekyll-configuration.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:jekyll_post_extension = '.md'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Import
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" load settings
set runtimepath+=~/.vim/
runtime! rc/plugins/*.vim
