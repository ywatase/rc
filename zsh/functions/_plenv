#compdef plenv

typeset -A opt_args
local context state line curcontext="$curcontext" expl args ret=1

local -a _plenv_subcommands _plenv_subcommands_summary
local -a _plenv_available_perl_versions

# cache policy
#(Nmw+2)   # 2week
#(Nmh+5)   # 5hour
#(Nms+100) # 100sec
_plenv_caching_policy () {
	local -a oldp
	oldp=( "$1"(Nmh+5) ) # 1 week
	(( $#oldp ))
}

_find_or_store_cache () {
	local cache_store
	local -a list
	varname=$1
	cache_store="_plenv_$varname"

	local cache_policy
	zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
	if [[ -z "$cache_policy" ]]; then
		zstyle ":completion:${curcontext}:" cache-policy _plenv_caching_policy
	fi
	list=(${(P)varname})
  if ( [[ $#list -eq 0 ]] || _cache_invalid $cache_store ) && ! _retrieve_cache $cache_store ; then
    eval _get_$varname
    _store_cache $cache_store $varname
	fi
}

_get__plenv_available_perl_versions () {
  _plenv_available_perl_versions=(${(@f)"$(plenv completions install)"})
}

_get__plenv_subcommands () {
  _plenv_subcommands=(${(@f)"$(plenv commands)"})
}

_get__plenv_subcommands_summary () {
  _plenv_subcommands_summary=(${(@f)"$(__get__plenv_subcommand_summary)"})
}

__get__plenv_subcommand_summary () {
  local cmd
  _get__plenv_subcommands
  for cmd in ${_plenv_subcommands}
  do
    plenv help --summary $cmd | perl -lne 's/^\s+//; printf qq|%s\n|, join ":", split(/\s+/, $_, 2);'
  done
}

_arguments -C \
  '1: :->cmds' \
  '*: :->args' && ret=0

_wanted_installed_perlversion () {
  local -a installed_versions
  installed_versions=(${(@f)"$(plenv completions global)"})
  _wanted versions expl 'perl versions' compadd $installed_versions && ret=0 
}
_no_argument () {
  (( ret )) && _message 'no more arguments'
}

case $state in
  cmds)
    _find_or_store_cache '_plenv_subcommands_summary'
    _describe -t commands 'plenv command' _plenv_subcommands_summary && ret=0
    ;;
  args)
    case $line[1] in
      global | local | shell)
        if [[ $CURRENT > 3 ]] ; then
          _no_argument
        else
          _wanted_installed_perlversion
        fi
        ;;
      install)
        if [[ $CURRENT > 3 ]] ; then
          _no_argument
        else
          _find_or_store_cache '_plenv_available_perl_versions'
          _wanted perl_versions expl 'perl-<version-number>' compadd $_plenv_available_perl_versions && ret=0 
        fi
        ;;
      migrate-modules)
        if [[ $CURRENT > 4 ]] ; then
          _no_argument
        else
          _wanted_installed_perlversion
        fi
        ;;
      exec | which | whence)
        # words=(perbrew exec),  CURRENT=2 が渡るのでwordsを空にして、カーソルを2戻す
        shift 2 words
        (( CURRENT-- ))
        (( CURRENT-- ))
        if [[ $CURRENT < 2 ]] ; then
          _path_files -W $HOME/.plenv/shims -g "*(x)" && ret=0
        elif [[ $line[1] == 'which' ]] ; then
          _no_argument
        else
          _normal
        fi
        ;;
      *)
        _no_argument
        ;;
    esac
    ;;
esac

return ret

# vim: et sw=2 ts=2 si
