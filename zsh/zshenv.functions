###
# Check Command
###
can ()           { where "$1" >/dev/null 2>&1              }
is_linux ()      { [ `uname` = "Linux" ]                   }
is_mac ()        { [ `uname` = "Darwin" ]                  }
is_debian ()     { [ -e '/etc/debian-release' ]            }
is_redhat ()     { [ -e '/etc/redhat-release' ]            }
is_cygwin ()     { [ "$CYGWIN" ]                           }
is_screen ()     { [ "$TERM" = "screen" ] && ! is_tmux     }
is_tmux ()       { [ "$TMUX" != "" ]                       }
is_host ()       { [ ${${(A)${(s:.:)HOST}}[(w)1]} = "$1" ] }
is_ssh_client () { ! [ "$SSH_TTY" ]                        }

get_myip () {
  curl -s ifconfig.me
}

oppai () {
  perl -le 'use Acme::Oppai;eval q{print "Acme::Oppai"}."->oppai"x(shift||4);' $1
}


###
# Perl
###
git-delete-merged-branch () {
  local reply
  if [[ $(git branch --merged | grep -v '*' | wc -l) -eq 0 ]] ; then
    echo no merged branch. exit
    return
  fi
  echo 'Merged branches'
  git branch --merged | grep -v '*'
  echo 'Delete them? [y/N]'
  read reply
  if [[ "$reply" == [yY] ]] ; then
    echo "run: git branch --merged | grep -v '*' | xargs -I % git branch -d %"
    git branch --merged | grep -v '*' | xargs -I % git branch -d %
  fi
}

alias perlpath="perldoc -l"
alias plackup_indexes="plackup -MPlack::App::Directory::Markdown \
       -e 'Plack::App::Directory::Markdown->new(visible_all_files =>1, markdown_class =>q{Text::Markdown::Discount})->to_app'"
if which cpandoc >/dev/null 2>&1 ; then
  perldoc () {
    cpandoc "$@"
  }
fi

perlsource () {
  vim -R $(perlpath $1 )
}
perlsourcew () {
  ${_SUDO} vim $(perlpath $1)
}
develcover () {
  cover -delete
  HARNESS_PERL_SWITCHES=-MDevel::Cover make test
  cover
}

perlversion () {
  local MODULE
  for MODULE in $@
  do
    perl -le "eval { require $MODULE}; print qq{${MODULE}: \$${MODULE}::VERSION}"
  done
}
perlmodulelist () {
  local modulelist 
  modulelist=(`find $(perl -e 'print join qq{\n}, @INC') -name .packlist | perl -lpe 'm{/auto/(.*)/.packlist}; (my $m = $1) =~ s{/}{::}g; $_ = $m;' | sort | uniq`)
  perlversion $modulelist
}
perlmethod () {
  PERLMETHOD_ALL=; PERLMETHOD_USAGE=
  while getopts a PERLMETHOD_OPT
  do
    case $PERLMETHOD_OPT in
      a) PERLMETHOD_ALL=1;;
      *) PERLMETHOD_USAGE=1;;
    esac
  done
  shift `expr $OPTIND - 1`
  if [ "$PERLMETHOD_USAGE" ] || ! [ "$1" ] ||  [ "$2" ] ; then
    echo -e "perlmethod [-a] Some::Perl::Module -- show methods of Perl Module\n\ta:\tshow private method"
  elif [ "$PERLMETHOD_ALL" ] ; then
    perl -M$1 -le"map{print}sort+grep{defined&{\"$1::\$_\"}}keys%{$1::}"
  else
    perl -M$1 -le"map{print}sort+grep{defined&{\"$1::\$_\"}&&m{^[^_]}}keys%{$1::}"
  fi
  PERLMETHOD_ALL=; PERLMETHOD_USAGE=
}

install-cpantools () {
	cpanm App::httpstatus App::Ack CPAN::Meta::Check
}

install-perlbrew () {
  curl -kL http://xrl.us/perlbrewinstall | bash
}
install-plenv () {
  if is_mac ; then
    brew install plenv --HEAD
  else
    git clone https://github.com/tokuhirom/plenv.git ~/.plenv/
  fi
}

install-cpanm () {
  curl -kL http://cpanmin.us | perl - --self-upgrade $@
}

install-module-install () {
  cpanm Module::Setup \
    Module::Install \
    Module::Install::TestTarget \
    Module::Install::GithubMeta \
    Module::Install::ReadmePodFromPod \
    Module::Install::ReadmeFromPod \
    Module::Install::ReadmeMarkdownFromPod \
    Module::Install::TestBase \
    Module::Install::CPANfile \
    Test::Requires
}

install-amon2flavor () {
  local path_rcfile
  local cwd
  cwd=`pwd`
  path_rcfile=$(dirname  $(perl -le 'use Cwd; print Cwd::abs_path($ARGV[0])' ~/.vim))
  cd $path_rcfile/perl
  tar czf Amon2-Setup-Flavor-Teng.tar.gz Amon2-Setup-Flavor-Teng
  cpanm ./Amon2-Setup-Flavor-Teng.tar.gz
  rm Amon2-Setup-Flavor-Teng.tar.gz
  cd $cwd
}

cpan-uninstall () {
  local MODULE
  for MODULE in $@
  do
    ${_SUDO} perl -MConfig -MExtUtils::Install -e '($FULLEXT=shift)=~s{::}{/}g;uninstall "$Config{sitearchexp}/auto/$FULLEXT/.packlist",1' $MODULE
  done
}

cpan-uninstall-perlbrew () {
  local MODULE
  for MODULE in $@
  do
    perl -MConfig -MExtUtils::Install -e '($FULLEXT=shift)=~s{::}{/}g;uninstall "$Config{sitearchexp}/auto/$FULLEXT/.packlist",1' $MODULE
  done
}

cpan-uninstall-locallib () {
  local MODULE
  for MODULE in $@
  do
    if [ "x${PERL_LOCAL_LIB_ROOT}" != "x"  -a -d  ${PERL_LOCAL_LIB_ROOT} ] ; then
      perl -MConfig -MExtUtils::Install -e '($FULLEXT=shift)=~s{::}{/}g; uninstall "$ENV{PERL_LOCAL_LIB_ROOT}/lib/perl5/$Config{archname}/auto/$FULLEXT/.packlist",1' $MODULE
    else
      echo 'environtal variable "PERL_LOCAL_LIB_ROOT" is not correct'
    fi
  done
}

yaml2pl () {
  local FILE
  local BASENAME
  for FILE in $@
  do 
    BASENAME=$(basename $FILE .yaml)
    BASENAME=$(basename $BASENAME .yml)
    perl -MYAML::Any -e 'use Data::Dumper; { package Data::Dumper; sub qquote{shift}; }
      use Encode; $Data::Dumper::Useperl=1; $Data::Dumper::Terse=1; print "+" . encode(q{utf8}, Dumper YAML::Any::LoadFile("$ARGV[0]"))' $FILE > $BASENAME.pl
  done
}

xml2yaml () {
  local FILE
  local BASENAME
  for FILE in $@
  do 
    BASENAME=$(basename $FILE .xml)
    perl -MYAML::Any -MXML::Simple -e 'print Dump XMLin "$ARGV[0]"' $FILE > $BASENAME.yaml
  done
}

json2yaml () {
  local FILE
  local BASENAME
  for FILE in $@
  do 
    BASENAME=$(basename $FILE .json)
    perl -MYAML::Any -MJSON -e 'open my $fh, "<", $ARGV[0] or die $!; print Dump JSON::decode_json(join(q{}, <$fh>));close $fh;' $FILE > $BASENAME.yml
  done
}

locallib () {
  echo "OLD PATH: $PATH"
  if [ "$1" = "" ] ; then
    echo 'usage: locallib [locallib path]'
  elif [ -d $1 ] ; then
    if [ "x$PERL_LOCAL_LIB_ROOT" != "x" ] ; then
      PATH=$(echo $PATH | sed "s#\(^\|:\)$PERL_LOCAL_LIB_ROOT\/bin:##")
    fi
    eval $(perl -Mlocal::lib=$1)
  else
    echo "$1 doen't exit"
  fi
  echo "NEW PATH: $PATH"
}

locallib_delete () {
  unset PERL_LOCAL_LIB_ROOT PERL_MB_OPT PERL_MM_OPT PERL5LIB
}

###
# ruby
###
install-rvm () {
  bash < <(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
}

install-rbenv () {
  git clone https://github.com/sstephenson/rbenv.git $HOME/.rbenv
  echo 'path=($HOME/.rbenv/bin(N-/) $path)' >> .zshenv
  echo 'eval "$(rbenv init -)"' >> .zshenv
  cd $HOME/.rbenv
  mkdir plugins
  cd plugins
  git clone https://github.com/sstephenson/ruby-build.git
  exec
  rbenv rehash
}

###
# python
###
install-pythonbrew () {
  curl -kL http://github.com/utahta/pythonbrew/raw/master/pythonbrew-install | bash
}

###
# node.js
###
install-nvm () {
  https://github.com/creationix/nvm.git ~/.nvm
}
install-nodelibs () {
# less
  npm install -g less
# js minify tool
  npm install -g uglify-js
# testacular https://github.com/vojtajina/testacular
  npm install -g testacular
# testacular https://github.com/vojtajina/testacular
  npm install -g nodelint
  if is_mac ; then
    brew install phantomjs
  else
    echo 'download phantomjs from http://phantomjs.org/download.html'
  fi
}

###
# mysql download
###
download-mysql () {
  local version
  version=${1:="5.6.10-1.el6.x86_64"}
  curl -Lo "MySQL-#1-${version}.rpm"   "http://dev.mysql.com/get/Downloads/MySQL-$(echo $version|perl -pe 's/(\d+\.\d+).*/\1/')/MySQL-{client,server,shared,devel,shared-compat}-${version}.rpm/from/http://cdn.mysql.com/"
}

###
# rpm
###
rpm_list () {
  rpm2cpio $1 | cpio --list
}
rpm_extract () {
  rpm2cpio $1 | cpio -id
}
