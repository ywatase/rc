###
# zsh
###
## man zshall
# zman [search word]
zman() {
    if [[ -n $1 ]]; then
        PAGER="less -g -s '+/"$1"'" man zshall
        echo "Search word: $1"
    else
        man zshall
    fi
}

# zsh 用語検索
# http://qiita.com/mollifier/items/14bbea7503910300b3ba
zwman() {
    zman "^       $1"
}

# zsh フラグ検索
zfman() {
    local w='^'
    w=${(r:8:)w}
    w="$w${(r:7:)1}|$w$1(\[.*\].*)|$w$1:.*:|$w$1/.*/.*"
    zman "$w"
}

zprof_function () {
  if zmodload zsh/zprof ; then
    zprof
    "$@"
    zprof
    zmodload -u zsh/zprof
  fi
}

###
# profile
###
profile_vimscript () {
  local testfile=${1:-$HOME/.vim/bundle/syntastic/plugin/syntastic.vim}
  vim --cmd "profile start $HOME/profile.txt" --cmd "profile file $testfile"  +q && vim $HOME/profile.txt
}
profile_vimstartup() {
  local log=$HOME/vim.startuptime.log
  rm $log &&  vim foo --startuptime $log +q && vim $log +'%!sort -nk 2'
}
profile_vimstartup_by_time () {
  local testfile=${1:-$HOME/.zshrc}
  while [ 1 ]
  do
    time vim $testfile +wq
    sleep 1
  done
}

localvim () {
  local d=$(pwd -P)
  local -a p
  p=(
    $d/lib(N-/)
    $d/local/lib/perl5(N-/)
    $d/local/lib/perl5/$(perl -MConfig -e 'print $Config{archname}')(N-/)
  )
  echo "let g:syntastic_perl_lib_path = ['$(pwd)/lib']" > .local.vimrc
  echo "set path=${(j:,:)p}" >> .local.vimrc
}

###
# Check Command
###
can ()           { where "$1" >/dev/null 2>&1                             }
is_linux ()      { [[ `command /usr/bin/uname` = "Linux" ]]               }
is_mac ()        { [[ `command /usr/bin/uname` = "Darwin" ]]              }
is_mac_apple ()  { is_mac && [[ `command /usr/bin/uname -m` = "arm64" ]]  }
is_mac_intel ()  { is_mac && [[ `command /usr/bin/uname -m` = "x86_64" ]] }
is_debian ()     { [[ -e '/etc/debian-release' ]]                         }
is_redhat ()     { [[ -e '/etc/redhat-release' ]]                         }
is_cygwin ()     { [[ "$CYGWIN" ]]                                        }
is_screen ()     { [[ "$TERM" = "screen" ]] && ! is_tmux                  }
is_tmux ()       { [[ "$TMUX" != "" ]]                                    }
is_vim ()        { [[ "$VIM" != "" ]]                                     }
is_host ()       { [[ ${${(A)${(s:.:)HOST}}[(w)1]} = "$1" ]]              }
is_ssh_client () { ! [[ "$SSH_TTY" ]]                                     }

get_myip () {
  curl -s ifconfig.me
}

wakeup () {
	local mac mac_nocolon
	mac=$1
	mac_nocolon=$(echo $mac | perl -pe 's/://g')
	if which wakeonlan >/dev/null 2>&1 ; then
		wakeonlan "$mac"
	elif which wakelan >/dev/null 2>&1 ; then
		wakelan $mac_nocolon
	elif [ -x /usr/sbin/etherwake ] ; then
		/usr/sbin/etherwake $mac_nocolon
	else
		echo There is no wakeonlan command.
		return
	fi
}

###
# CSS minify
###
minify-css () {
  local file=$1
  local bname=$(basename .css)
  curl -X POST -s --data-urlencode "input@$bname.css" https://cssminifier.com/raw > $bname.min.css
}

###
# git
###
git-delete-merged-branch () {
  local reply
  if [[ $(git branch --merged | grep -v '*' | wc -l) -eq 0 ]] ; then
    echo no merged branch. exit
    return
  fi
  echo 'Merged branches'
  git branch --merged | grep -v '*'
  echo 'Delete them? [y/N]'
  read reply
  if [[ "$reply" == [yY] ]] ; then
    echo "run: git branch --merged | grep -v '*' | xargs -I % git branch -d %"
    git branch --merged | grep -v '*' | xargs -I % git branch -d %
  fi
}

gwt() {
  local git_cdup_dir=$(command git rev-parse --show-cdup)
  local cmd="git worktree add ${git_cdup_dir}git-worktrees/$1 -b $1"
  echo $cmd
  $cmd
  cd ${git_cdup_dir}git-worktrees/$1
}


###
# github
###
github_repositories () {
  local git_user
  git_user=${1:=ywatase}
  curl -qsS https://api.github.com/users/$git_user/repos\?per_page\=100 \
    | jq  -r '.[].name'
}

###
# Perl
###
alias perlpath="perldoc -l"
alias plackup_indexes="plackup -MPlack::App::Directory -e 'Plack::App::Directory->new->to_app'"
alias plackup_markdown="plackup -MPlack::App::Directory::Markdown \
       -e 'Plack::App::Directory::Markdown->new(visible_all_files =>1, markdown_class =>q{Text::Markdown::Discount})->to_app'"
if which cpandoc >/dev/null 2>&1 ; then
  perldoc () {
    cpandoc "$@"
  }
fi

alias perl_nytprof='perl -d:NYTProf'
alias perl_chk_leak='perl -MDevel::Leak::Object=GLOBAL_bless';
alias plackup_chk_leak="plackup -MDevel::Leak::Object=GLOBAL_bless -e '\$Devel::Leak::Object::TRACKSOURCELINES = 1' --max-workers=1";
minil () {
  if is_valid_minilla_version ; then
	  =minil "$@"
  else
	  cpanm Minilla
  fi
}
is_valid_minilla_version () {
  perl -MMinilla -Mversion -le 'use version;  my $rv; my $v = version->parse($Minilla::VERSION); if ($v < version->parse("v0.9.0")){print STDERR "Too old Minilla"; $r=1}else{$r=0} exit $r;'
}
perlsource () {
  vim -R $(perlpath $1 )
}
perlsourcew () {
  ${_SUDO} vim $(perlpath $1)
}
develcover () {
  local cmd
  cover -delete
  if [ -e "Makefile" ] ; then;
    cmd="make test"
  elif [ -e "Build" ] ; then;
    cmd="./Build test"
  else
    cmd="prove -l t"
  fi
  HARNESS_PERL_SWITCHES=-MDevel::Cover $cmd
  cover
}

perlversion () {
  local MODULE
  for MODULE in $@
  do
    perl -le "eval { require $MODULE}; print qq{${MODULE}: \$${MODULE}::VERSION}"
  done
}
perlmodulelist () {
  local modulelist
  modulelist=(`find $(perl -e 'print join qq{\n}, @INC') -name .packlist | perl -lpe 'm{/auto/(.*)/.packlist}; (my $m = $1) =~ s{/}{::}g; $_ = $m;' | sort | uniq`)
  perlversion $modulelist
}
perlmethod () {
  PERLMETHOD_ALL=; PERLMETHOD_USAGE=
  while getopts a PERLMETHOD_OPT
  do
    case $PERLMETHOD_OPT in
      a) PERLMETHOD_ALL=1;;
      *) PERLMETHOD_USAGE=1;;
    esac
  done
  shift `expr $OPTIND - 1`
  if [ "$PERLMETHOD_USAGE" ] || ! [ "$1" ] ||  [ "$2" ] ; then
    echo -e "perlmethod [-a] Some::Perl::Module -- show methods of Perl Module\n\ta:\tshow private method"
  elif [ "$PERLMETHOD_ALL" ] ; then
    perl -M$1 -le"map{print}sort+grep{defined&{\"$1::\$_\"}}keys%{$1::}"
  else
    perl -M$1 -le"map{print}sort+grep{defined&{\"$1::\$_\"}&&m{^[^_]}}keys%{$1::}"
  fi
  PERLMETHOD_ALL=; PERLMETHOD_USAGE=
}

install-cpantools () {
	cpanm App::httpstatus App::Ack CPAN::Meta::Check
}

install-perltools () {
  curl -kL https://raw2.github.com/hirose31/list-installed-perl-modules/master/list-installed-perl-modules > ~/bin/list-installed-perl-modules
}

install-plenv () {
  if is_mac ; then
    brew install plenv
    brew install perl-build
  else
    git clone https://github.com/tokuhirom/plenv.git ~/.plenv/
    git clone https://github.com/tokuhirom/Perl-Build.git ~/.plenv/plugins/perl-build/
    git clone https://github.com/Tacahilo/plenv-update.git ~/.plenv/plugins/plenv-update
  fi
  if [ "$(basename $SHELL)" = 'zsh' ] ; then
    echo 'path=($HOME/.plenv/bin(N-/) $path)' >> ~/.zshenv
    echo 'eval "$(plenv init -)"' >> ~/.zshenv
    echo 'check your ~/.zshenv'
  else
    echo 'export PATH="$HOME/.plenv/bin:$PATH"' >> ~/.bash_profile
    echo 'eval "$(plenv init -)"' >> ~/.bash_profile
    echo 'check your ~/.bash_profile'
  fi
}

cpan-uninstall () {
  local MODULE
  for MODULE in $@
  do
    ${_SUDO} perl -MConfig -MExtUtils::Install -e '($FULLEXT=shift)=~s{::}{/}g;uninstall "$Config{sitearchexp}/auto/$FULLEXT/.packlist",1' $MODULE
  done
}

yaml2pl () {
  local FILE
  local BASENAME
  for FILE in $@
  do
    BASENAME=$(basename $FILE .yaml)
    BASENAME=$(basename $BASENAME .yml)
    perl -MYAML::Any -e 'use Data::Dumper; { package Data::Dumper; sub qquote{shift}; }
      use Encode; $Data::Dumper::Useperl=1; $Data::Dumper::Terse=1; print "+" . encode(q{utf8}, Dumper YAML::Any::LoadFile("$ARGV[0]"))' $FILE > $BASENAME.pl
  done
}

lint-gitlab-ci-yml () {
  if ! [ -e .gitlab-ci.yml ] ; then
    echo .gitlab-ci.yml is not found >&2
    return
  fi
  curl -sS --header "Content-Type: application/json" \
    --data @<(python -c 'import sys, yaml, json; y=yaml.safe_load(open(sys.argv[1], "r")); print(json.dumps({"content": json.dumps(y)}))' .gitlab-ci.yml) \
    ${GITLAB_API_ENDOPOINT:-https://gitlab.com/api/v4}/ci/lint
}

yaml2json () {
  local FILE
  local BASENAME
  for FILE in $@
  do
    BASENAME=$(basename $FILE .yaml)
    BASENAME=$(basename $BASENAME .yml)
    python -c 'import sys, yaml, json; y=yaml.safe_load(open(sys.argv[1], "r")); print(json.dumps(y))' $FILE > $BASENAME.json
#    ruby -e "require 'yaml'; require 'json'; puts JSON.pretty_generate YAML.load ARGF.read" $FILE > $BASENAME.json
  done
}
yaml2json-filter() {
  cat "$@" | python -c 'import sys, yaml, json; y=yaml.safe_load(sys.stdin.read()); print(json.dumps(y))' "$@"
}

yaml2yaml() {
  cat "$@" | python -c 'import sys, yaml; y=yaml.safe_load(sys.stdin.read()); print(yaml.dump(y))'
}


xml2yaml () {
  local FILE
  local BASENAME
  for FILE in $@
  do
    BASENAME=$(basename $FILE .xml)
    perl -MYAML::Any -MXML::Simple -e 'print Dump XMLin "$ARGV[0]"' $FILE > $BASENAME.yaml
  done
}

json2yaml () {
  local FILE
  local BASENAME
  for FILE in $@
  do
    BASENAME=$(basename $FILE .json)
    ruby -e "require 'yaml'; require 'json';puts YAML.dump JSON.load ARGF.read" $FILE  > $BASENAME.yml
  done
}

json2yaml-filter() {
  cat "$@" | python -c 'import sys, yaml; y=yaml.safe_load(sys.stdin.read()); print(yaml.dump(y))' "$@"
}

json2go () { open "https://mholt.github.io/json-to-go/"}
curl2go () { open "https://mholt.github.io/curl-to-go/"}

ldif2json () {
  perl -wpe 'BEGIN{print qq{---\n}}
    s/\A([^:]*)\:\:? (.*)\z/  $1: $2/gmsx;
    s/ssh\-rsa (.*) (.*)\z/ssh-rsa $1/gmsx;
    s/\A(\s*)dn(.*)\z/- dn$2/gmsx;
  ' | yaml2json-filter
}

tai64nlocal () {
  perl -p -MTime::TAI64 -e 's/(^[^\s]+)/Time::TAI64::tai64nlocal($1)||$1/e'
}

###
# ruby
###
install-rbenv () {
  if is_redhat ; then
    sudo yum install zlib-devel openssl-devel libyaml-devel
  fi
  git clone https://github.com/sstephenson/rbenv.git $HOME/.rbenv
  echo 'path=($HOME/.rbenv/bin(N-/) $path)' >> .zshenv
  echo 'eval "$(rbenv init -)"' >> .zshenv
  cd $HOME/.rbenv
  mkdir plugins
  cd plugins
  git clone https://github.com/sstephenson/ruby-build.git
  exec
  rbenv rehash
}

###
# python
###
install-pyenv () {
  if is_mac ; then
    brew install plenv pyenv-virtualenv
  else
    git clone https://github.com/yyuu/pyenv.git $HOME/.pyenv
    if ! [ -d $HOME/.pyenv/plugins ] ; then
      mkdir $HOME/.pyenv/plugins
    fi
    cd $HOME/.pyenv/plugins
    git clone https://github.com/yyuu/pyenv-virtualenv.git
  fi
  exec
  if [ "$(basename $SHELL)" = 'zsh' ] ; then
    echo 'path=($HOME/.pyenv/bin(N-/) $path)' >> $HOME/.zshenv
    echo 'eval "$(pyenv init -)"' >> $HOME/.zshenv
  fi
  pyenv rehash
}

jinja2dump () {
  python -c '
import sys, yaml, jinja2
_loader         = jinja2.FileSystemLoader("./", encoding="utf-8")
_environment    = jinja2.Environment(loader=_loader)
_template       = _environment.get_template(sys.argv[1])
dict = {}
if len(sys.argv) == 3 :
  dict = yaml.safe_load(open(sys.argv[2], "r+"))
sys.stdout.write(_template.render(dict))
' "$@"
}

###
# node.js
###
install-ndenv () {
  git clone https://github.com/riywo/ndenv.git $HOME/.ndenv
  echo 'path=($HOME/.ndenv/bin(N-/) $path)' >> .zshenv
  echo 'eval "$(ndenv init -)"' >> .zshenv
  cd $HOME/.ndenv
  mkdir plugins
  cd plugins
  git clone https://github.com/riywo/node-build.git
  exec
  ndenv rehash
}

###
# mysql download
###
download-mysql () {
  local version
  version=${1:="5.6.12-1.el6.x86_64"}
  curl -Lo "MySQL-#1-${version}.rpm"   "http://dev.mysql.com/get/Downloads/MySQL-$(echo $version|perl -pe 's/(\d+\.\d+).*/\1/')/MySQL-{client,server,shared,devel,shared-compat}-${version}.rpm/from/http://cdn.mysql.com/"
}

###
# rpm
###
rpm_list () {
  rpm2cpio $1 | cpio --list
}
rpm_extract () {
  rpm2cpio $1 | cpio -id
}

###
# Swagger / OpenAPI
###
alias openapi-generator-cli-go="openapi-generator-cli generate -g go -o out/go -i openapi.yml"
openapi-generator-cli () {
  [[ -n $OPEN_API_UPDATE ]] && docker pull openapitools/openapi-generator-cli:latest
  docker run -w /local -v ${PWD}:/local openapitools/openapi-generator-cli:latest $@
}

###
# vagrant
###
vagrant-upreload () {
  local n
  for n in "${@:-default}"
  do
    vagrant up --no-provision $n
    vagrant vbguest $n
    vagrant reload $n
  done
  vagrant provision

}

###
# mackerel
###
alias mkr_kernel='mkr hosts -v | jq -r '"'"'.[] | {"name": .name, "kernel": .meta.kernel.release}'"'"

###
# docker - dry
###
install-dry () {
  curl -sSf https://moncho.github.io/dry/dryup.sh | sudo sh
  sudo chmod 755 /usr/local/bin/dry
}
###
# docker with minikube
###
docker-start () {
  minikube start --container-runtime="docker"
  docker-setenv
}

docker-stop () {
  minikube stop
}

docker-setenv () {
  eval "$(minikube docker-env)"
}

###
# other
###
clear_cache () {
  local y old_dir=`pwd`
  echo remove these[y/N]
  echo $(cd $_cache_dir; ls)
  read y
  if [ "$y" = "y" ] ; then
    rm $_cache_dir/*
    echo zsh cache files removed.
  else
    echo canceled.
  fi

}

autoload -U regexp-replace
setopt re_match_pcre
if whence -p ansible-lint >/dev/null 2>&1 ; then
  ansible-lint () {
    local arg
    local -a args
    for arg in "$@"
    do
      if [[ "$arg" =~ "\.ya?ml$" && -e "$arg" ]] ; then
        arg=${arg:a}
        regexp-replace arg '(files|templates|tasks|handlers|vars|defaults|meta)/[^/]+\.ya?ml' ''
      fi
      args=($args $arg)
    done
    $(whence -p ansible-lint) $args
  }
fi


minio-run () {
  [ -d ~/minio ] || mkdir ~/minio
   docker run -p 9000:9000 -v ~/minio:/export -d --name minio minio/minio server /export
   docker logs minio
}

vmpf () {
  port=$1
  vm=${2:-${C_DOCKER_MACHINE}}
  VBoxManage modifyvm $vm --natpf1 "tcp-port$port,tcp,,$port,,$port"
  VBoxManage modifyvm $vm --natpf1 "udp-port$port,udp,,$port,,$port"
}

vmpf-delete () {
  port=$1
  vm=${2:-${C_DOCKER_MACHINE}}
  VBoxManage modifyvm $vm --natpf1 delete "tcp-port$port"
  VBoxManage modifyvm $vm --natpf1 delete "udp-port$port"
}
# vim:set et ts=2 sts=2 sw=2:
