###
# Check Command
###
can ()           { where "$1" >/dev/null 2>&1              }
is_linux ()      { [ `uname` = "Linux" ]                   }
is_mac ()        { [ `uname` = "Darwin" ]                  }
is_debian ()     { [ -e '/etc/debian-release' ]            }
is_redhat ()     { [ -e '/etc/redhat-release' ]            }
is_cygwin ()     { [ "$CYGWIN" ]                           }
is_screen ()     { [ "$TERM" = "screen" ] && ! is_tmux     }
is_tmux ()       { [ "$TMUX" != "" ]                       }
is_host ()       { [ ${${(A)${(s:.:)HOST}}[(w)1]} = "$1" ] }
is_ssh_client () { ! [ "$SSH_TTY" ]                        }

get_myip () {
  curl -s ifconfig.me
}

oppai () {
  perl -le 'use Acme::Oppai;eval q{print "Acme::Oppai"}."->oppai"x(shift||4);' $1
}

wakeup () {
	local mac mac_nocolon
	mac=$1
	mac_nocolon=$(echo $mac | perl -pe 's/://g')
	if which wakeonlan >/dev/null 2>&1 ; then
		wakeonlan "$mac"
	elif which wakelan >/dev/null 2>&1 ; then
		wakelan $mac_nocolon
	elif [ -x /usr/sbin/etherwake ] ; then
		/usr/sbin/etherwake $mac_nocolon
	else
		echo There is no wakeonlan command.
		return
	fi
}

wakeup_igademo () {
   wakeup '00:1e:8c:79:61:ed'
}

install-ricty () {
  brew install fontforge
  local tmpdir ricty_version migu_1m_url cwd
  ricty_version=3.2.3
  migu_1m_url='http://sourceforge.jp/frs/redir.php?m=jaist&f=%2Fmix-mplus-ipa%2F59022%2Fmigu-1m-20130617.zip'
  cwd=$PWD

  tmpdir=$(mktemp -d)
  cd $tmpdir
  
  curl -L -o Inconsolata.otf http://levien.com/type/myfonts/Inconsolata.otf
  curl -L -o $ricty_version.zip https://github.com/yascentur/Ricty/zipball/$ricty_version
  curl -L -o migu-1m.zip $migu_1m_url
  unzip $ricty_version.zip
  unzip migu-1m.zip
  cd yascentur-Ricty-*/
  cp ../Inconsolata.otf .
  cp ../migu-1m-*/*.ttf .
  ./ricty_generator.sh Inconsolata.otf migu-1m-regular.ttf migu-1m-bold.ttf
  cp Ricty*.ttf /Library/Fonts/
  rm -r $tmpdir
  cd cwd
}

###
# Perl
###
set_perlbrew_env () {
	[[ -s "$HOME/perl5/perlbrew/etc/bashrc" ]] && source "$HOME/perl5/perlbrew/etc/bashrc"
}
git-delete-merged-branch () {
  local reply
  if [[ $(git branch --merged | grep -v '*' | wc -l) -eq 0 ]] ; then
    echo no merged branch. exit
    return
  fi
  echo 'Merged branches'
  git branch --merged | grep -v '*'
  echo 'Delete them? [y/N]'
  read reply
  if [[ "$reply" == [yY] ]] ; then
    echo "run: git branch --merged | grep -v '*' | xargs -I % git branch -d %"
    git branch --merged | grep -v '*' | xargs -I % git branch -d %
  fi
}

alias perlpath="perldoc -l"
alias plackup_indexes="plackup -MPlack::App::Directory -e 'Plack::App::Directory->new->to_app'"
alias plackup_markdown="plackup -MPlack::App::Directory::Markdown \
       -e 'Plack::App::Directory::Markdown->new(visible_all_files =>1, markdown_class =>q{Text::Markdown::Discount})->to_app'"
if which cpandoc >/dev/null 2>&1 ; then
  perldoc () {
    cpandoc "$@"
  }
fi

alias perl_nytprof='perl -d:NYTProf'
alias perl_chk_leak='perl -MDevel::Leak::Object=GLOBAL_bless';
alias plackup_chk_leak="plackup -MDevel::Leak::Object=GLOBAL_bless -e '\$Devel::Leak::Object::TRACKSOURCELINES = 1' --max-workers=1";
minil () {
  if is_valid_minilla_version ; then
	  =minil "$@"
  else 
	  cpanm Minilla
  fi
}
is_valid_minilla_version () {
  perl -MMinilla -Mversion -le 'use version;  my $rv; my $v = version->parse($Minilla::VERSION); if ($v < version->parse("v0.9.0")){print STDERR "Too old Minilla"; $r=1}else{$r=0} exit $r;'
}
perlsource () {
  vim -R $(perlpath $1 )
}
perlsourcew () {
  ${_SUDO} vim $(perlpath $1)
}
develcover () {
  local cmd
  cover -delete
  if [ -e "Makefile" ] ; then;
    cmd="make test"
  elif [ -e "Build" ] ; then;
    cmd="./Build test"
  else
    cmd="prove -l t"
  fi
  HARNESS_PERL_SWITCHES=-MDevel::Cover $cmd
  cover
}

perlversion () {
  local MODULE
  for MODULE in $@
  do
    perl -le "eval { require $MODULE}; print qq{${MODULE}: \$${MODULE}::VERSION}"
  done
}
perlmodulelist () {
  local modulelist 
  modulelist=(`find $(perl -e 'print join qq{\n}, @INC') -name .packlist | perl -lpe 'm{/auto/(.*)/.packlist}; (my $m = $1) =~ s{/}{::}g; $_ = $m;' | sort | uniq`)
  perlversion $modulelist
}
perlmethod () {
  PERLMETHOD_ALL=; PERLMETHOD_USAGE=
  while getopts a PERLMETHOD_OPT
  do
    case $PERLMETHOD_OPT in
      a) PERLMETHOD_ALL=1;;
      *) PERLMETHOD_USAGE=1;;
    esac
  done
  shift `expr $OPTIND - 1`
  if [ "$PERLMETHOD_USAGE" ] || ! [ "$1" ] ||  [ "$2" ] ; then
    echo -e "perlmethod [-a] Some::Perl::Module -- show methods of Perl Module\n\ta:\tshow private method"
  elif [ "$PERLMETHOD_ALL" ] ; then
    perl -M$1 -le"map{print}sort+grep{defined&{\"$1::\$_\"}}keys%{$1::}"
  else
    perl -M$1 -le"map{print}sort+grep{defined&{\"$1::\$_\"}&&m{^[^_]}}keys%{$1::}"
  fi
  PERLMETHOD_ALL=; PERLMETHOD_USAGE=
}

install-cpantools () {
	cpanm App::httpstatus App::Ack CPAN::Meta::Check
}

install-perlbrew () {
  curl -kL http://xrl.us/perlbrewinstall | bash
}

install-perltools () {
  curl -kL https://raw2.github.com/hirose31/list-installed-perl-modules/master/list-installed-perl-modules > ~/bin/list-installed-perl-modules
}

install-plenv () {
  if is_mac ; then
    brew install plenv
    brew install perl-build
  else
    git clone https://github.com/tokuhirom/plenv.git ~/.plenv/
    git clone https://github.com/tokuhirom/Perl-Build.git ~/.plenv/plugins/perl-build/
    git clone https://github.com/Tacahilo/plenv-update.git ~/.plenv/plugins/plenv-update
  fi
  if [ "$(basename $SHELL)" = 'zsh' ] ; then
    echo 'path=($HOME/.plenv/bin(N-/) $path)' >> ~/.zshenv
    echo 'eval "$(plenv init -)"' >> ~/.zshenv
    echo 'check your ~/.zshenv'
  else
    echo 'export PATH="$HOME/.plenv/bin:$PATH"' >> ~/.bash_profile
    echo 'eval "$(plenv init -)"' >> ~/.bash_profile
    echo 'check your ~/.bash_profile'
  fi
}

install-cpanm () {
  curl -kL http://cpanmin.us | perl - --self-upgrade $@
}

install-module-install () {
  cpanm Module::Setup \
    Module::Install \
    Module::Install::TestTarget \
    Module::Install::GithubMeta \
    Module::Install::ReadmePodFromPod \
    Module::Install::ReadmeFromPod \
    Module::Install::ReadmeMarkdownFromPod \
    Module::Install::TestBase \
    Module::Install::CPANfile \
    Test::Requires
}

install-amon2flavor () {
  local path_rcfile
  local cwd
  cwd=`pwd`
  path_rcfile=$(dirname  $(perl -le 'use Cwd; print Cwd::abs_path($ARGV[0])' ~/.vim))
  cd $path_rcfile/perl
  tar czf Amon2-Setup-Flavor-Teng.tar.gz Amon2-Setup-Flavor-Teng
  cpanm ./Amon2-Setup-Flavor-Teng.tar.gz
  rm Amon2-Setup-Flavor-Teng.tar.gz
  cd $cwd
}

cpan-uninstall () {
  local MODULE
  for MODULE in $@
  do
    ${_SUDO} perl -MConfig -MExtUtils::Install -e '($FULLEXT=shift)=~s{::}{/}g;uninstall "$Config{sitearchexp}/auto/$FULLEXT/.packlist",1' $MODULE
  done
}

cpan-uninstall-perlbrew () {
  local MODULE
  for MODULE in $@
  do
    perl -MConfig -MExtUtils::Install -e '($FULLEXT=shift)=~s{::}{/}g;uninstall "$Config{sitearchexp}/auto/$FULLEXT/.packlist",1' $MODULE
  done
}

cpan-uninstall-locallib () {
  local MODULE
  for MODULE in $@
  do
    if [ "x${PERL_LOCAL_LIB_ROOT}" != "x"  -a -d  ${PERL_LOCAL_LIB_ROOT} ] ; then
      perl -MConfig -MExtUtils::Install -e '($FULLEXT=shift)=~s{::}{/}g; uninstall "$ENV{PERL_LOCAL_LIB_ROOT}/lib/perl5/$Config{archname}/auto/$FULLEXT/.packlist",1' $MODULE
    else
      echo 'environtal variable "PERL_LOCAL_LIB_ROOT" is not correct'
    fi
  done
}

yaml2pl () {
  local FILE
  local BASENAME
  for FILE in $@
  do 
    BASENAME=$(basename $FILE .yaml)
    BASENAME=$(basename $BASENAME .yml)
    perl -MYAML::Any -e 'use Data::Dumper; { package Data::Dumper; sub qquote{shift}; }
      use Encode; $Data::Dumper::Useperl=1; $Data::Dumper::Terse=1; print "+" . encode(q{utf8}, Dumper YAML::Any::LoadFile("$ARGV[0]"))' $FILE > $BASENAME.pl
  done
}

xml2yaml () {
  local FILE
  local BASENAME
  for FILE in $@
  do 
    BASENAME=$(basename $FILE .xml)
    perl -MYAML::Any -MXML::Simple -e 'print Dump XMLin "$ARGV[0]"' $FILE > $BASENAME.yaml
  done
}

json2yaml () {
  local FILE
  local BASENAME
  for FILE in $@
  do 
    BASENAME=$(basename $FILE .json)
    perl -MYAML::Any -MJSON -e 'open my $fh, "<", $ARGV[0] or die $!; print Dump JSON::decode_json(join(q{}, <$fh>));close $fh;' $FILE > $BASENAME.yml
  done
}

locallib () {
  echo "OLD PATH: $PATH"
  if [ "$1" = "" ] ; then
    echo 'usage: locallib [locallib path]'
  elif [ -d $1 ] ; then
    if [ "x$PERL_LOCAL_LIB_ROOT" != "x" ] ; then
      PATH=$(echo $PATH | sed "s#\(^\|:\)$PERL_LOCAL_LIB_ROOT\/bin:##")
    fi
    eval $(perl -Mlocal::lib=$1)
  else
    echo "$1 doen't exit"
  fi
  echo "NEW PATH: $PATH"
}

locallib_delete () {
  unset PERL_LOCAL_LIB_ROOT PERL_MB_OPT PERL_MM_OPT PERL5LIB
}

###
# ruby
###
install-rvm () {
  bash < <(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
}

install-rbenv () {
  if is_redhat ; then
    sudo yum install zlib-devel openssl-devel libyaml-devel
  fi
  git clone https://github.com/sstephenson/rbenv.git $HOME/.rbenv
  echo 'path=($HOME/.rbenv/bin(N-/) $path)' >> .zshenv
  echo 'eval "$(rbenv init -)"' >> .zshenv
  cd $HOME/.rbenv
  mkdir plugins
  cd plugins
  git clone https://github.com/sstephenson/ruby-build.git
  exec
  rbenv rehash
}

###
# python
###
install-pythonbrew () {
  curl -kL http://github.com/utahta/pythonbrew/raw/master/pythonbrew-install | bash
}

install-pyenv () {
  if is_mac ; then
    brew install plenv pyenv-virtualenv
  else
    git clone https://github.com/yyuu/pyenv.git $HOME/.pyenv
    if ! [ -d $HOME/.pyenv/plugins ] ; then
      mkdir $HOME/.pyenv/plugins
    fi
    cd $HOME/.pyenv/plugins
    git clone https://github.com/yyuu/pyenv-virtualenv.git
  fi
  exec
  if [ "$(basename $SHELL)" = 'zsh' ] ; then
    echo 'path=($HOME/.pyenv/bin(N-/) $path)' >> $HOME/.zshenv
    echo 'eval "$(pyenv init -)"' >> $HOME/.zshenv
  fi
  pyenv rehash
}

###
# node.js
###
install-nvm () {
  git clone https://github.com/creationix/nvm.git ~/.nvm
}
install-nodelibs () {
# less
  npm install -g less
# js minify tool
  npm install -g uglify-js
# testacular https://github.com/vojtajina/testacular
  npm install -g testacular
# testacular https://github.com/vojtajina/testacular
  npm install -g nodelint
  if is_mac ; then
    brew install phantomjs
  else
    echo 'download phantomjs from http://phantomjs.org/download.html'
  fi
}

###
# mysql download
###
download-mysql () {
  local version
  version=${1:="5.6.12-1.el6.x86_64"}
  curl -Lo "MySQL-#1-${version}.rpm"   "http://dev.mysql.com/get/Downloads/MySQL-$(echo $version|perl -pe 's/(\d+\.\d+).*/\1/')/MySQL-{client,server,shared,devel,shared-compat}-${version}.rpm/from/http://cdn.mysql.com/"
}

###
# rpm
###
rpm_list () {
  rpm2cpio $1 | cpio --list
}
rpm_extract () {
  rpm2cpio $1 | cpio -id
}

###
# github
###

github_repositories () {
  local git_user
  git_user=${1:=ywatase}
  curl https://api.github.com/users/$git_user/repos\?per_page\=100 | jq  '.[].name'
}

###
# docker
###
#
if is_mac ; then
   export DOCKER_HOST=tcp://127.0.0.1:2375
fi
function docker-host-vagrant () {
  export DOCKER_HOST=tcp://127.0.0.1:4243
}
function docker-host-boot2docker () {
  export DOCKER_HOST=tcp://127.0.0.1:2375
}
function vagrant-docker-ssh () {
  local cwd=$pwd
  cd ~/.vagrant.d/data/docker-host
  vagrant ssh
  cd $cwd
}

install-docker () {
  if is_mac ; then
    install-packer
    brew install docker
    brew install boot2docker
  else
    echo not supported.
    exit 1
  fi
}

install-packer () {
  brew tap homebrew/binary
  brew install homebrew/binary/packer
}

build_custom_boot2docker () {
  # https://medium.com/boot2docker-lightweight-linux-for-docker/boot2docker-together-with-virtualbox-guest-additions-da1e3ab2465c
	# https://gist.github.com/brutasse/94d8d66aabf2e7f4e246
	if ! [ -d ~/work/boot2docker ] ; then
		mkdir -p ~/work/boot2docker
	fi

	if ! [ -d 94d8d66aabf2e7f4e246 ] ; then
		git clone https://gist.github.com/brutasse/94d8d66aabf2e7f4e246
	fi
	cd 94d8d66aabf2e7f4e246

	git pull

	./build_docker.sh

	local TODAY=$(date +%Y%m%d)

	# build the actual boot2docker.iso with virtual box guest additions
	docker build -t mattes/boot2docker-vbga .

	# the following line is proposed in many tutorials, but does not work for me
	# (it outputs an iso that won't work)
	# docker run -i -t --rm mattes/boot2docker-vbga > ../boot2docker.${TODAY}.iso

	# # so I do:
  (perl -e "sleep 60" | docker run -i -t --rm mattes/boot2docker-vbga /bin/bash) &
	# # then in a second shell:
  container_id=$(docker ps -aq -n=1)
	docker cp $container_id:boot2docker.iso ../boot2docker.${TODAY}.iso
	ln -sf boot2docker.${TODAY}.iso boot2docker.iso
  docker stop $container_id
}

boot2docker-init () {
	boot2docker init
	boot2docker stop
  cp ~/work/boot2docker/boot2docker.iso ~/.boot2docker/boot2docker.iso
	VBoxManage sharedfolder add boot2docker-vm -name var_folders -hostpath /var/folders
	VBoxManage sharedfolder add boot2docker-vm -name home -hostpath $HOME
  VBoxManage controlvm "boot2docker-vm" natpf1 "registry,tcp,,5000,,5000"
	boot2docker up
}

boot2docker-up () {
	boot2docker up
  local target mp
  boot2docker ssh "sudo modprobe vboxsf && sudo mkdir -p $HOME && sudo mount -t vboxsf home $HOME"
  for target in /var/folders
  do
    mp=$(echo $target | perl -pe 's{/}{_}g;s{^_}{};')
    boot2docker ssh "sudo modprobe vboxsf && sudo mkdir -p $target && sudo mount -t vboxsf $mp $target"
  done
}

docker-registry () {
  local m
  local cmd=$1
  typeset -A m
  m=("list" 1 "delete" 2 "run" 3)
  shift
  if [ "$m[$cmd]" = "" ] ; then
    echo no subcommand: $cmd
    echo subcommands: run list delete

  else 
    eval _docker-registry-$cmd "$@"
  fi
}

_docker-registry-run () {
  docker run -p 5000:5000 -d -v ~/docker_registry:/tmp/registry registry
}

_docker-registry-list () {
    curl --dump-header - -X GET http://localhost:5000/v1/repositories/$1
}

_docker-registry-delete () {
    curl --dump-header - -X DELETE http://localhost:5000/v1/repositories/$1
}



###
# other
###
clear_cache () {
  local y old_dir=`pwd`
  echo remove these[y/N]
  echo $(cd $_cache_dir; ls) 
  read y
  if [ "$y" = "y" ] ; then
    rm $_cache_dir/*
    echo zsh cache files removed.
  else
    echo canceled.
  fi

}

# vim:set et ts=2 sts=2 sw=2:
