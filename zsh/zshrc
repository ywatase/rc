###
# Set shell options
##
setopt auto_menu auto_cd auto_pushd correct auto_name_dirs auto_remove_slash
setopt pushd_ignore_dups rm_star_silent sun_keyboard_hack
setopt extended_glob list_types no_beep always_last_prompt
setopt cdable_vars sh_word_split auto_param_keys
# Ë£úÂÆå„É™„Çπ„Éà„Åù„ÅÆ‰ªñ„Åß„ÇÇASCII(7„Éì„ÉÉ„Éà)‰ª•‰∏ä„ÅÆÊñáÂ≠ó(8„Éì„ÉÉ„Éà)ÊñáÂ≠ó„ÇíË°®Á§∫
# # („Éû„É´„ÉÅ„Éê„Ç§„ÉàÊñáÂ≠óË£úÂÆå)
setopt PRINT_EIGHT_BIT

# set default keybind at first.
# if EDITOR=vi, then automatically load as 'bindkey -v'
bindkey -e # emacs key bindings
#bindkey -v             # vi key bindings

autoload -Uz is-at-least
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 5000
zstyle ':chpwd:*' recent-dirs-default yes
zstyle ':completion:*' recent-dirs-insert both

###
# enable auto complete
###
fpath=(/usr/local/share/zsh-completions $fpath)
fpath=($HOME/.zsh/functions(N-/) $HOME/.zsh/zsh-perl-completions.git(N-/) $fpath)
if is_mac ; then
  path=($HOME/bin(N-/) $HOME/bin/*(N-/) $path)
fi

typeset -U fpath
typeset -U path
autoload -U compinit
compinit

###
# zplug
###
source $HOME/.zsh/zshrc.zplug
#source $HOME/.zsh/zshrc.antigen

###
# setting for peco
###
if whence -p peco >/dev/null ; then
  for f (~/.zsh/peco/*.zsh) source "${f}" # load peco sources
  bindkey '^r' peco-select-history
  bindkey '^@' peco-cdr
fi

###
# aws-cli
###
if whence -p aws_zsh_completer.sh >/dev/null ; then
  local p=$(whence -p aws_zsh_completer.sh)
  if [[ $p =~ "pyenv/bin" ]] ;  then
    p=$(pyenv which aws_zsh_completer.sh)
    source $p
  else
    source_if_exist /usr/local/share/zsh/site-functions/_aws
  fi
  source $HOME/.zsh/zshrc.aws
fi
if which aws >/dev/null 2>&1 ; then
  alias aws="https_proxy= aws"
fi

###
# Alias
###
alias l=ls
if is_mac ; then
  if which gls >/dev/null 2>&1 ; then
    alias ls="gls --color=auto --show-control-chars"
  else
    alias ls="ls -G"
  fi
  if which gtar >/dev/null 2>&1 ; then
    alias tar=gtar
  fi
  alias tagit='open -a Tagit'
  alias "clang++11"="clang++ -std=c++11 -stdlib=libc++ -Weverything"
  alias netstat_osx='sudo lsof -i -P'
  alias netstat_nltp='sudo lsof -iTCP -sTCP:LISTEN -P'
  alias mac_dot_files_visible="defaults write com.apple.finder AppleShowAllFiles -bool YES;killall Finder"
  alias mac_dot_files_invisible="defaults write com.apple.finder AppleShowAllFiles -bool NO;killall Finder"
  alias mac_set_tcp_delayed_ack_0="sudo sysctl -w net.inet.tcp.delayed_ack=0"
  alias mac_enable_timemachie="sudo tmutil enablelocal"
  alias mac_disable_timemachie="sudo tmutil disablelocal"
  mac_dashboad_off() {
    echo "DASHBOARD OFF"
    mac_dashboard-toggle "true"
  }

  mac_dashboad_on() {
    echo "DASHBOARD ON"
    mac_dashboard-toggle "false"
  }
  mac_dashboard_toggle() {
    if $1 = "true" ; then
      defaults write com.apple.dashboard mcx-disabled -boolean true
    else
      defaults write com.apple.dashboard mcx-disabled -boolean false
    fi
    killall Dock
  }
else
  alias ls="ls --color=auto --show-control-chars"
  alias keybord_us="sudo loadkeys us"
  alias keybord_jp="sudo loadkeys jp106"
  if whence -p upower > /dev/null 2>&1 ; then
    alias battery="upower -i $(upower -e | grep 'BAT') | grep -E 'state|to\ full|percentage'"
  fi

fi
alias la="ls -aF"
alias ll="ls -l"
alias psn="ps auxf | perl -pe 's/^\\s*(\\d+)/sprintf qq{%-10s}, substr(scalar(getpwuid(\$1)), 0, 10)/e;'"
alias rdesk="rdesktop -r clipboard -zP -ken-us"
alias rdesk_full="rdesk -f"
alias git-submodule-pull="git submodule foreach 'git checkout master; git pull'"
alias git-submodule-fetch="git submodule foreach 'git checkout master; git fetch'"
alias get_viplugin="lftp -u viplugin,667well www.satokar.com"
alias start_selenium_server='java -jar /home/watase/selenium-server/selenium-server.jar'
alias make_patch='diff -u --strip-trailing-cr -B -w'
alias delete_proxy_env='unset HTTP_PROXY HTTPS_PROX http_proxy https_proxyy'
alias -g V='| vim -'
alias -g G='| grep '
alias -g L='| less'
alias -g T='| tail -f'
alias -g SPLIT="| perl -le 'map{chomp;print+join\"\\n\",split/\$ARGV[0]/}<STDIN>'"
alias -g JOIN="| perl -le 'print+join\"\$ARGV[0]\",(map{chomp;\$_}<STDIN>)'"
alias -g C='| colorize-http-status.sed'

alias dstat-full='dstat -Tclmdrn'
alias dstat-mem='dstat -Tclm'
alias dstat-cpu='dstat -Tclr'
alias dstat-net='dstat -Tclnd'
alias dstat-disk='dstat -Tcldr'
alias sshv="$(whence -p ssh) -l vagrant -o 'NoHostAuthenticationForLocalhost=yes' -i ~/.vagrant.d/insecure_private_key"
alias be="bundle exec"
alias ce="carton exec"

diary () { vim _posts/$(date '+%Y-%m-%d' --date "${1:-today}")-diary.md }
diary_yesterday () { diary yesterday }

# git
if whence -p hub >/dev/null 2>/dev/null ; then
  eval "$(hub alias -s)"
fi

# mysql prompt
export MYSQL_PS1='MySQL \v \u@\h(\d)>'
# ssh agent
if is_ssh_client && ! is_screen && ! is_tmux ; then
  for type in dsa rsa ed25519
  do
    if [ -e ~/.ssh/id_${type} ] ; then
      keychain ~/.ssh/id_${type}
    fi
  done
  source ~/.keychain/$HOST-sh
fi
agent="$HOME/tmp/ssh-agent-$USER"
if [ -S "$SSH_AUTH_SOCK" ] ; then
  case $SSH_AUTH_SOCK in
    /tmp/*/agent.[0-9]*)
      if ! [ -e "$HOME/tmp" ] ; then
        mkdir "$HOME/tmp"
      fi
      ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
  esac
elif [ -S $agent ]; then
  export SSH_AUTH_SOCK=$agent
else
  echo "no ssh-agent"
fi

recovery_ssh_auth_sock_if_lost_sock () {
  if [ -S $SSH_AUTH_SOCK ] ; then
    return
  fi
  netstat -lnx | perl -ne 'print "$1\n" if m|(/tmp/ssh-.+/agent.+)|' | while read agent
  do
    if [ -r $agent ] ; then
      echo "link: '$agent' to '$SSH_AUTH_SOCK'"
      ln -fs $agent $SSH_AUTH_SOCK
      export SSH_AUTH_SOCK
      break
    fi
  done
  echo "Error: agent socket is not found."
}

###
# mac
###
if is_mac ; then
  brew-make-alias-of-coreutils () {
    brew ls coreutils 2>&1| grep /bin/g | perl -lne 'chomp; m{/bin/g(\w+)$} and print sprintf q{alias %s=g%s}, $1, $1 ' >> ~/.zsh/zshenv_coreutils_alias
  }
  guidiff() {
   if ! [ $# -eq 2 -a -e "${1}" -a -e "${2}" ]; then
     echo '[Usage] guidiff <diff_path_a> <diff_path_b>.'
     return 1
   fi
   local path_a=`getabspath "${1}"`
   local path_b=`getabspath "${2}"`
   /Applications/DiffMerge.app/Contents/MacOS/DiffMerge "${path_a}" "${path_b}"
  }
fi

###
# screen
###
if is_screen || is_tmux ; then
    preexec() {
        # see [zsh-workers:13180]
        # http://www.zsh.org/mla/workers/2000/msg03993.html
        emulate -L zsh
        local -a cmd; cmd=(${(z)2})
        case $cmd[1] in
            fg)
                if (( $#cmd == 1 )); then
                    cmd=(builtin jobs -l %+)
                else
                    cmd=(builtin jobs -l $cmd[2])
                fi
                ;;
            %*)
                cmd=(builtin jobs -l $cmd[1])
                ;;
            ls|gls)
                return
                ;;
            cd)
                if (( $#cmd == 2)); then
                    cmd[1]=$cmd[2]:t
                else
                    cmd[1]="~"
                fi
                change_status_title $cmd[1]
                prev=$cmd[1]
                return
                ;;
            vim|vi|gvim|sh|perl|bash)
                if (( $#cmd == 2)); then
                  cmd[1]="$cmd[1]:$cmd[2]:t"
                fi
                change_status_title $cmd[1]
                prev=$cmd[1]
                return
                ;;
            *)
                change_status_title $cmd[1]:t
                prev=$cmd[1]
                return
                ;;
        esac
        local -A jt; jt=(${(kv)jobtexts})
        $cmd >>(read num rest
            cmd=(${(z)${(e):-\$jt$num}})
            change_status_title $cmd[1]:t) 2>/dev/null
        prev=$cmd[1]
    }
#    precmd() {
#        change_status_title $:$prev:t
#    }
    change_status_title() {
      echo -n "k$1\\"
    }
fi


if is_screen ; then
  function ssh_screen(){
    eval server=\${$#}
    recovery_ssh_auth_sock_if_lost_sock
    screen -t $server env SSH_AUTH_SOCK="$SSH_AUTH_SOCK" ssh "$@"
  }
  alias ssh=ssh_screen
  compdef _ssh ssh_screen=ssh
elif is_tmux ; then
  function ssh_tmux() {
    eval server=\${$#}
    recovery_ssh_auth_sock_if_lost_sock
    tmux neww -n $server "exec ssh $@"
  }
  function man_tmux() {
    tmux split-window "exec man $@"
  }
  alias ssh=ssh_tmux
  compdef _ssh ssh_tmux=ssh
  compdef _man man_tmux=man
fi

function ssh_resolve_cname () {
    TARGET=`host $1 | perl -e '$a=join q{},<>;$a=~m/is an alias for ([^\s]+)/; print $1'`
  if [ x$TARGET = x ] ; then
    ssh $@
  else
    shift
    echo $TARGET
    ssh $@ $TARGET
  fi
}

# ec2
ec2_get_metadata () {
  curl -s http://169.254.169.254/latest/meta-data/
}

r() {
  local f
  f=(~/.zsh/functions/*(.))
  unfunction $f:t 2> /dev/null
  autoload -U $f:t
  compinit -u
}

###
# Environment variable
###
if is_mac  ; then
# avoid "/usr/bin/vim" exit code bug.
# if setting EDITOR=vim, /usr/bin/vim sometimes return 1 and fail to edit cron, commit log and so on
  if whence -p gdircolors >/dev/null 2>&1 ; then
    eval $(gdircolors ~/.zsh/dircolors-solarized.git/dircolors.256dark)
  fi
  export EDITOR=/usr/bin/vim
elif [ -e ~/.dir_colors/dircolors ] ; then
  eval `dircolors ~/.dir_colors/dircolors`
  export EDITOR=vim
else
  eval `dircolors -b` # set LS_COLORS
  export EDITOR=vim
fi
export PAGER=less
export LESS='-R'
export TZ=JST-9
export SVN_SSH=ssh
export WORDCHARS='i*?_-.[]~=&;!#$%^(){}<>'
umask 022

bindkey ' ' magic-space  # also do history expansion on space
bindkey "^?" backward-delete-char # delete for debian


###
# keybord-history
###
HISTFILE=$HOME/.zsh-history           # Â±•Ê≠¥„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò„Åô„Çã
HISTSIZE=100000                       # „É°„É¢„É™ÂÜÖ„ÅÆÂ±•Ê≠¥„ÅÆÊï∞
SAVEHIST=100000                       # ‰øùÂ≠ò„Åï„Çå„ÇãÂ±•Ê≠¥„ÅÆÊï∞
setopt extended_history               # Â±•Ê≠¥„Éï„Ç°„Ç§„É´„Å´ÊôÇÂàª„ÇíË®òÈå≤
setopt share_history
setopt hist_no_store
setopt hist_ignore_dups hist_ignore_space
function history-all { history -E 1 } # ÂÖ®Â±•Ê≠¥„ÅÆ‰∏ÄË¶ß„ÇíÂá∫Âäõ„Åô„Çã
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end
# anyframe keybind
bindkey '^xb' anyframe-widget-cdr
bindkey '^x^b' anyframe-widget-checkout-git-branch
bindkey '^xr' anyframe-widget-execute-history
bindkey '^x^r' anyframe-widget-execute-history
bindkey '^xi' anyframe-widget-put-history
bindkey '^x^i' anyframe-widget-put-history
bindkey '^xg' anyframe-widget-cd-ghq-repository
bindkey '^x^g' anyframe-widget-cd-ghq-repository
bindkey '^[' anyframe-widget-cd-ghq-repository
bindkey '^xk' anyframe-widget-kill
bindkey '^x^k' anyframe-widget-kill
bindkey '^xe' anyframe-widget-insert-git-branch
bindkey '^x^e' anyframe-widget-insert-git-branch

###
# predict
###
#autoload predict-on
#predict-on

###
# command auto complete
###
zstyle ':completion:*:default' menu select=1
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}  # color
zstyle ':completion:*' use-cache true
# add knows_host to hosts completion (sneed HashHostKey no at .ssh/config)
zstyle -e ':completion::*:*:*:hosts' hosts 'reply=(${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ })'

# This file gives some examples of compctl commands.
# You can either put the compctl commands in your .zshrc
# or include a separate file from your .zshrc with the
# source command.

###
# complete database
###
# All completions for zsh.
# Some builtins.
compctl -j -P % fg bg wait jobs disown
compctl -A shift
compctl -caF whence which
compctl -F unfunction
compctl -a unalias
compctl -v unset typeset declare vared readonly export integer
compctl -e disable
compctl -d enable
compctl -k '(cputime filesize datasize stacksize coredumpsize resident \
  memoryuse memorylocked descriptors openfiles vmemorysize)' limit u{n,}limit
compctl -l '' -x 'p[1]' -f -- . source

###
# for directory operators
###
# Rmdir only real directories
compctl -g '(|.)*(-/)' rmdir dircmp rd mdcd mkdir
compctl -x 'p[2]' -k "(wheel staff ftpadmin okoma)"  -- pubmd

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

# The next line updates PATH for the Google Cloud SDK.
source_if_exist ~/google-cloud-sdk/path.zsh.inc

# The next line enables shell command completion for gcloud.
source_if_exist ~/google-cloud-sdk/completion.zsh.inc

# added by travis gem
source_if_exist ~/.travis/travis.sh

# vim:set ts=2 sw=2 et si:
